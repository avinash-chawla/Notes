1. Intro

--> We will place file input Button
--> It will be used to upload images
--> But we do not store images in Db, we will store its path 
--> We will store images in static folder

----------------------------------------------------------------------------------

2. Adding the File Input Button

--> Styling of Input[type="file"] is not possible in Angular material
--> So we hide it and uses material button and on clicking of that, it will generate clicking on that input[type="file"]
--> Done using template variable of input element, clicking on button will trigger clicking of this file input.

--> In post-create.html

<div>
    <button type="button" mat-stroked-button (click)="filePicker.click()">Pick Image</button>
    <input type="file" #filePicker>
</div>

--> In post-create.css

input[type="file"]{
   visibility: hidden;
}

----------------------------------------------------------------------------------

3. Converting Template driven to Reactive Form

--> To control file-input, we are doing this.
--> Steps:
1. First make form property and assign type of FormGroup
2. Create its object in ngOnInit method and define required controllers
3. Define builtin validators for controllers
4. Now this form property contains the form details, replace all form with this.form
5. We have to send this form property to html template, to do that we use [formGroup] property binding and bind it to this form property
6. To access controller from this form property in template, we use form.get('controllerName'), it will used in validation in template


----------------------------------------------------------------------------------

--> In post-create.this

import { Component, OnInit } from '@angular/core';
import { Post } from '../post.model';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { PostsService } from './../posts.service';
import { ActivatedRoute, ParamMap } from '@angular/router';

@Component({
  selector: 'app-post-create',
  templateUrl: './post-create.component.html',
  styleUrls: ['./post-create.component.css']
})
export class PostCreateComponent implements OnInit {

  private mode = "create";
  private postId: string;
  public post: Post;
  public isLoading = false;
  form: FormGroup;

  constructor(public postsService: PostsService, private route: ActivatedRoute) { }

  ngOnInit(): void {
    this.form = new FormGroup({
      'title': new FormControl(null, { validators: [Validators.required, Validators.minLength(3)] }),
      'content': new FormControl(null, [Validators.required])
    });
    this.route.paramMap.subscribe((paramMap: ParamMap) => {
      if (paramMap.has("postId")) {
        this.mode = "edit";
        this.postId = paramMap.get('postId');
        this.isLoading = true
        this.postsService.getPost(this.postId).subscribe(postData => {
          this.isLoading = false
          this.post = { id: postData._id, title: postData.title, content: postData.content };
          this.form.setValue({
            'title': this.post.title,
            'content': this.post.content
          });
        })

      } else {
        this.mode = "create";
        this.postId = null;
      }
    })
  }

  onSavePost() {
    if (this.form.invalid) {
      return;
    }
    this.isLoading = true;
    if (this.mode === "create") {
      this.postsService.addPost(this.form.value.title, this.form.value.content);
    } else {
      this.postsService.updatePost(this.postId, this.form.value.title, this.form.value.content);
    }
    this.form.reset();
  }
}

----------------------------------------------------------------------------------


--> In post-create.html

<mat-card>
    <mat-spinner *ngIf="isLoading"></mat-spinner>
    <form (submit)="onSavePost()" [formGroup]="form" *ngIf="!isLoading">
        <mat-form-field>
            <input matInput type="text" name="title" placeholder="Post Title" formControlName="title">
            <mat-error *ngIf="form.get('title').invalid">Please enter a post title.</mat-error>
        </mat-form-field>
        <div>
            <button type="button" mat-stroked-button (click)="filePicker.click()">Pick Image</button>
            <input type="file" #filePicker>
        </div>
        <mat-form-field>
            <textarea matInput rows="4" name="content" placeholder="Post Content" formControlName="content"></textarea>
            <mat-error *ngIf="form.get('content').invalid">Please enter a post title.</mat-error>
        </mat-form-field>
        <button mat-raised-button color="accent" type="submit">Save Post</button>
    </form>
</mat-card>

----------------------------------------------------------------------------------

4. Notes in above

--> Use reset() instead of resetForm()
--> this.form.reset()

--> It is [formGroup]   --> f small in template
--> It is formControlName   --> without property binding
--> It you want to use property binding, do below
--> [formControlName]="'title'"     --> binding to string

--> Second argument to new FormControl object is, updateOn
--> It has 3 options - change, blue, submit
--> When do you to apply validations
--> new FormControl(null, {validators: }, updateOn: change)
--> change is default

--> this.form.setValue will set the value for form while editing form is generated.

----------------------------------------------------------------------------------

5. Adding Image Control Field to save the image

--> To save the image in form, we will not use formControlName to bind that input
--> We will use event.target property which contains input file
--> We will bind with formGroup asynchronously, means bind it when button is clicked.

--> In post-create.html
--> Creating change event and passing event object

<div>
    <button type="button" mat-stroked-button (click)="filePicker.click()">Pick Image</button>
    <input type="file" #filePicker (change)="onImagePicker($event)">
</div>

----------------------------------------------------------------------------------

--> Handling onImagePicker

--> In post-create.ts

ngOnInit(): void {
this.form = new FormGroup({
    'title': new FormControl(null, { validators: [Validators.required, Validators.minLength(3)] }),
    'content': new FormControl(null, [Validators.required]),
    'image': new FormControl(null, { validators: [Validators.required] })
});


onImagePicker(event: Event) {
    const file = (event.target as HTMLInputElement).files[0];
    this.form.patchValue({ image: file });
    this.form.get('image').updateValueAndValidity();
    console.log(this.form);
    console.log(file);
}

--> We do not directly bind image control field, we bind it on button click event to access image file.
--> We first make 3rd controller object to save image and apply validation if null
--> In onImagePicker, we first get file using event object
--> Then we add that file in our form object using method patchValue
--> Then we link controller object with this new Value of patchValue

----------------------------------------------------------------------------------

6. Adding an Image Preview

--> We will read the image file and convert into url to reach out to that url and add src attribute to img tag for Image preview.
--> First create space for image in html and for url see below code
--> In ts file, make one property - imagePreview 
--> We will save url in that property

--> In post-create.ts

imagePreview: string;

onImagePicker(event: Event) {
    const file = (event.target as HTMLInputElement).files[0];
    this.form.patchValue({ image: file });
    this.form.get('image').updateValueAndValidity();
    const reader = new FileReader();
    reader.onload = () => {
      this.imagePreview = reader.result as string;
    }
    reader.readAsDataURL(file);
}

--> In post-create.html

<div class="image-preview" *ngIf="imagePreview !== '' && imagePreview">
    <img [src]="imagePreview" [alt]="form.value.title">
</div>

--> In css

.image-preview{
   height: 5rem;
   margin: 1rem 0;
}

.image-preview img{
   height: 100%;
}

----------------------------------------------------------------------------------

7. Image validation

--> Make new file in post-create folder --> mime-type.validator.ts
--> It is higher javascript code --> Just do copy paste.
--> It validates for correct image file, instead of any file.

import { AbstractControl } from "@angular/forms";
import { Observable, Observer, of } from "rxjs";

export const mimeType = (
    control: AbstractControl
): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {
    if (typeof (control.value) === 'string') {
        return of(null);
    }
    const file = control.value as File;
    const fileReader = new FileReader();
    const frObs = Observable.create(
        (observer: Observer<{ [key: string]: any }>) => {
            fileReader.addEventListener("loadend", () => {
                const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);
                let header = "";
                let isValid = false;
                for (let i = 0; i < arr.length; i++) {
                    header += arr[i].toString(16);
                }
                switch (header) {
                    case "89504e47":
                        isValid = true;
                        break;
                    case "ffd8ffe0":
                    case "ffd8ffe1":
                    case "ffd8ffe2":
                    case "ffd8ffe3":
                    case "ffd8ffe8":
                        isValid = true;
                        break;
                    default:
                        isValid = false; // Or you can use the blob.type as fallback
                        break;
                }
                if (isValid) {
                    observer.next(null);
                } else {
                    observer.next({ invalidMimeType: true });
                }
                observer.complete();
            });
            fileReader.readAsArrayBuffer(file);
        }
    );
    return frObs;
};


----------------------------------------------------------------------------------


--> In post-create.ts

ngOnInit(): void {
    this.form = new FormGroup({
      'title': new FormControl(null, { validators: [Validators.required, Validators.minLength(3)] }),
      'content': new FormControl(null, [Validators.required]),
      'image': new FormControl(null, { validators: [Validators.required], asyncValidators: [mimeType] })
    });

--> Attaching async Validator

--> In post-create.html
<div class="image-preview" *ngIf="imagePreview !== '' && imagePreview && form.get('image').valid">

--> Only displaying preview, if it passes the validation

----------------------------------------------------------------------------------

8. Adding Server Side upload

--> In posts.js route of Backend
--> npm i multer

--> This multer library deals with image files.
--> bodyParser is not used for dealing with images.

--> In posts.js

const multer = require('multer');

const MIME_TYPE_MAP = {
    'image/png': 'png',
    'image/jpeg': 'jpeg',
    'image/jpg': 'jpg'
}

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const isValid = MIME_TYPE_MAP[file.mimetype];
        let error = new Error("Invalid mime type");
        if (isValid) {
            error = null;
        }
        cb(error, "images");
    },
    filename: (req, file, cb) => {
        const name = file.originalname.toLowerCase().split(' ').join('-');
        const ext = MIME_TYPE_MAP[file.mimetype];
        cb(null, name + '-' + Date.now() + '.' + ext);
    }
});

--> This is middleware indeed
--> We define the destination of image file and given unique filename
--> It will also generate error if file type if not from png, jpeg or jpg.
--> We will apply this middleware to any route accepting image file as post data.

router.post('/', multer({storage: storage}).single("image"), (req, res) => {...})

--> single means it will accept single image file 
--> image in parameter means it will look image under image property of javascript object.
--> If it finds any file, it will save in given destination.

----------------------------------------------------------------------------------

9. Uploading Files

--> Now we have to upload image file from angular
--> We use FormData class, because it can bind both json and image file in single object.
--> In service class,

addPost(title: string, content: string, image: File) {
const postData = new FormData();
postData.append("title", title);
postData.append("content", content);
postData.append("image", image)
this.http
    .post<{ message: string, postId: string }>("http://localhost:3000/api/posts", postData)
    .subscribe(responseData => {
    const post: Post = {
        id: responseData.postId,
        title: title,
        content: content
    }
    this.posts.push(post);
    this.postsUpdated.next([...this.posts]);
    this.router.navigate(["/"]);
    });
}

--> In post-create.ts

onSavePost() {
    ...
    this.postsService.addPost(this.form.value.title, this.form.value.content, this.form.value.image);
}

----------------------------------------------------------------------------------

10. Working with the Files

--> We want to store url file source in database
--> And also want to respond this url to client to access that image.

--> In posts.js route of Server,

--> req.protocol will return http or https
--> req.get('host') will return domain name, now is localhost
--> multer will automatically apply file property to req object so using that to build url
--> Now in response, we are sending whole Post object including imagePath.

router.post('/', multer({ storage: storage }).single("image"), (req, res) => {
    const url = req.protocol + "://" + req.get("host");
    const post = new Post({
        title: req.body.title,
        content: req.body.content,
        imagePath: url + "/images/" + req.file.filename
    })
    console.log(post);
    post.save().then(createdPost => {
        res.status(201).send({
            message: "Successfully Posted",
            post: {
                ...createdPost,
                id: createdPost._id,
            }
        });
    })
});

--> In post Model in Server,

const postSchema = new mongoose.Schema({
    title: {
        type: String,
        required: true
    },
    content: {
        type: String,
        required: true
    },
    imagePath: {
        type: String,
        required: true
    }
});

----------------------------------------------------------------------------------

--> We will receive imagePath in angular, so we have to make some changes.
--> So in service class,

getPosts() {
this.http
    .get<{ message: string; posts: any }>(
    "http://localhost:3000/api/posts"
    )
    .pipe(
    map((postData) => {
        return postData.posts.map(post => {
        return {
            title: post.title,
            content: post.content,
            id: post._id,
            imagePath: post.imagePath
        }
        })
    })
    )
    .subscribe(transformedPosts => {
    this.posts = transformedPosts;
    this.postsUpdated.next([...this.posts]);
    });
}

addPost(title: string, content: string, image: File) {
const postData = new FormData();
postData.append("title", title);
postData.append("content", content);
postData.append("image", image, title)
this.http
    .post<{ message: string, post: Post }>("http://localhost:3000/api/posts", postData)
    .subscribe(responseData => {
    const post: Post = {
        id: responseData.post.id,
        title: title,
        content: content,
        imagePath: responseData.post.imagePath
    }
    this.posts.push(post);
    this.postsUpdated.next([...this.posts]);
    this.router.navigate(["/"]);
    });
}

----------------------------------------------------------------------------------

--> In post.model.ts

export interface Post {
    id: string;
    title: string;
    content: string;
    imagePath: string;
}

----------------------------------------------------------------------------------

--> In post-create.ts

  ngOnInit(): void {
    ...
      if (paramMap.has("postId")) {
        ..
        this.postsService.getPost(this.postId).subscribe(postData => {
          this.post = { id: postData._id, title: postData.title, content: postData.content, imagePath: null };
          this.form.setValue({
            'title': this.post.title,
            'content': this.post.content
          });
    ...
  }

----------------------------------------------------------------------------------

11.  Fetching Images on the Front End

--> In post-list.html

<div class="post-image">
    <img [src]="post.imagePath" [alt]="post.title">
</div>
<p>{{ post.content }}</p>

--> In post-list.css

.post-image{
  width: 100%
}

.post-image img{
  width: 100%;
  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);
}



--> There is an error coming
--> We can not fetch image from given url
--> why is that because at server, we have to make static folder which is sharable
--> By default, no file is sharable. 

--> In app.js of Server,

app.use("/images", express.static("images"));

--> If any url has /images, has access to this folder.
--> If it is in static folder --> static/images

----------------------------------------------------------------------------------

12. Updating Posts with Images

----------------------------------------------------------------------------------

--> In post-create.ts

--> Inside ngOnInit method,
this.post = { id: postData._id, title: postData.title, content: postData.content, imagePath: postData.imagePath };

--> Inside onSavePost method,
this.postsService.updatePost(this.postId, this.form.value.title, this.form.value.content, this.form.value.image);

----------------------------------------------------------------------------------

--> In service class

--> While updating form, we are passing imagePath, not an actual file object to user
--> So while updating form, if user changes image, we will get an image
--> If user doesn't updates image, we will get imagePath, which was initially provided.


  getPosts() {
    this.http
      .get<{ message: string; posts: any }>(
        "http://localhost:3000/api/posts"
      )
      .pipe(
        map((postData) => {
          return postData.posts.map(post => {
            return {
              title: post.title,
              content: post.content,
              id: post._id,
              imagePath: post.imagePath                     ----------> Here
            }
          })
        })
      )
      .subscribe(transformedPosts => {
        this.posts = transformedPosts;
        this.postsUpdated.next([...this.posts]);
      });
  }

  getPost(postId: string) {
    return this.http.get<{ _id: string, title: string, content: string, imagePath: string }>("http://localhost:3000/api/posts/" + postId);
  }

                       ----------> Here

  addPost(title: string, content: string, image: File) {
    const postData = new FormData();
    postData.append("title", title);
    postData.append("content", content);
    postData.append("image", image, title)
    this.http
      .post<{ message: string, post: Post }>("http://localhost:3000/api/posts", postData)
      .subscribe(responseData => {
        const post: Post = {
          id: responseData.post.id,
          title: title,
          content: content,
          imagePath: responseData.post.imagePath                     ----------> Here
        }
        this.posts.push(post);
        this.postsUpdated.next([...this.posts]);
        this.router.navigate(["/"]);
      });
  }

updatePost(postId: string, title: string, content: string, image: File | string) {
let postData: Post | FormData;
if (typeof image === "object") {
    postData = new FormData();
    postData.append('id', postId);
    postData.append('title', title);
    postData.append('content', content);
    postData.append('imagePath', image, title);
} else {
    postData = { id: postId, title: title, content: content, imagePath: image };
}
this.http.put("http://localhost:3000/api/posts/" + postId, postData)
    .subscribe((response) => {
    const updatedPost = [...this.posts];
    const oldPostIndex = updatedPost.findIndex(post => post.id === postId);
    const post: Post = { id: postId, title: title, content: content, imagePath: "" };
    updatedPost[oldPostIndex] = post;
    this.posts = updatedPost;
    this.postsUpdated.next([...this.posts]);
    this.router.navigate(["/"]);
    })
}

----------------------------------------------------------------------------------

--> In posts.js of Server,

router.put('/:id', multer({ storage: storage }).single("image"), (req, res) => {
    let imagePath = req.body.imagePath;
    if (req.file) {
        const url = req.protocol + "://" + req.get("host");
        imagePath = url + "/images/" + req.file.filename
    }
    const post = {
        _id: req.body.id,
        title: req.body.title,
        content: req.body.content,
        imagePath: imagePath
    };
    Post.updateOne({ _id: req.params.id }, { $set: post }).then(result => {
        console.log(result);
        res.status(200).json({ message: "Successfull" });
    })
})

----------------------------------------------------------------------------------
