1. Accessing Configuration Settings

config["Logging:LogLevel:Default"];

----------------------------------------------------------------------------------------------

{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "System": "Information",
      "Microsoft": "Information"
    }
  } 
}

----------------------------------------------------------------------------------------------

2. Using Configuration Data with the Options Pattern

  "Location": {
      "CityName": "Buffalo"
  },

  services.Configure<MessageOptions>(Configuration.GetSection("Location"));

----------------------------------------------------------------------------------------------

Earlier:

  services.Configure<MessageOptions>(options => {
	options.CityName = "xyz";
  }

----------------------------------------------------------------------------------------------

3. Launch Settings file 

string environ = Configuration["ASPNETCORE_ENVIRONMENT"];

----------------------------------------------------------------------------------------------

4. Determining the Environment in the Startup Class

--> The ASP.NET Core platform provides the IWebHostEnvironment service for determining the current environment

public void Configure(IApplicationBuilder app, IWebHostEnvironment env) {

    if (env.IsDevelopment()) {
        app.UseDeveloperExceptionPage();
    }

----------------------------------------------------------------------------------------------

5. Manage User Secrets

--> Right click project --> Manage User Secrets

----------------------------------------------------------------------------------------------

6. Using the Logging Service

public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILogger<Startup> logger) {

----------------------------------------------------------------------------------------------

            app.UseEndpoints(endpoints => {
                endpoints.MapGet("/", async context => {
                    logger.LogDebug("Response for / started");
                    await context.Response.WriteAsync("Hello World!");
                    logger.LogDebug("Response for / completed");
                });
            });

----------------------------------------------------------------------------------------------

LogTrace, LogDebug, LogInformation, LogError, LogCritical

Output window

----------------------------------------------------------------------------------------------

7. Cookies

            app.UseEndpoints(endpoints => {
               endpoints.MapGet("/cookie", async context => {

                    int counter1 = int.Parse(context.Request.Cookies["counter1"] ?? "0") + 1;

                    context.Response.Cookies.Append("counter1", counter1.ToString(),
                        new CookieOptions {
                            MaxAge = TimeSpan.FromMinutes(30)
                        });

                    int counter2 = int.Parse(context.Request.Cookies["counter2"] ?? "0") + 1;

                    context.Response.Cookies.Append("counter2", counter1.ToString(),
                        new CookieOptions {
                            MaxAge = TimeSpan.FromMinutes(30)
                        });

                    await context.Response
                        .WriteAsync($"Counter1: {counter1}, Counter2: {counter2}");
                });

                endpoints.MapGet("clear", context => {
                    context.Response.Cookies.Delete("counter1");
                    context.Response.Cookies.Delete("counter2");
                    context.Response.Redirect("/");
                    return Task.CompletedTask;
                });

----------------------------------------------------------------------------------------------

--> Cookies are accessed using context.Request.Cookies["Key"]
--> Cookies are created/replaced by Append method
--> Delete method will delete cookie

----------------------------------------------------------------------------------------------

--> CookieOptions

Domain		--> By default, same domain
Expires		--> DateTime
HttpOnly	--> Disable cookies in requests if made by javascript code
MaxAge		--> TimeSpan

----------------------------------------------------------------------------------------------

8. Enabling Cookie Consent Checking

--> Only Essential Cookies are sent to the Browser

        public void ConfigureServices(IServiceCollection services) {

            services.Configure<CookiePolicyOptions>(opts => {
                opts.CheckConsentNeeded = context => true;				--> Must want IsEssential Property to True to send cookie
            });
        }

        public void Configure(IApplicationBuilder app) {
            app.UseDeveloperExceptionPage();
            app.UseCookiePolicy();							--> it enforces the cookie policy

            app.UseEndpoints(endpoints => {
                endpoints.MapGet("/cookie", async context => {
                    int counter1 =
                        int.Parse(context.Request.Cookies["counter1"] ?? "0") + 1;
                    context.Response.Cookies.Append("counter1", counter1.ToString(),
                        new CookieOptions {
                            MaxAge = TimeSpan.FromMinutes(30),
                            IsEssential = true						--> Only "counter1" cookie will be saved
                        });
                    int counter2 =
                        int.Parse(context.Request.Cookies["counter2"] ?? "0") + 1;
                    context.Response.Cookies.Append("counter2", counter1.ToString(),
                        new CookieOptions {
                            MaxAge = TimeSpan.FromMinutes(30)
                        });
                    await context.Response
                        .WriteAsync($"Counter1: {counter1}, Counter2: {counter2}");
                });
	});


--> The result is that only cookies whose IsEssential property is true will be added to responses.

----------------------------------------------------------------------------------------------

9. Managing Cookie Consent

--> Asking the user instead, whether he wants to allow access to nonessential cookies set to its browser
--> Normally message will popup asking user for consent

--> but for this demo, we will use middleware route to provide consent or not.
--> If route is accessed, consent is provided.

----------------------------------------------------------------------------------------------

--> Consent is managed through a request feature

--> Features are accessed through the HttpRequest.Features property, and each feature is represented by an interface whose properties and methods deal with one aspect of low-level request handling.

----------------------------------------------------------------------------------------------

    public class ConsentMiddleware {

        private RequestDelegate next;

        public ConsentMiddleware(RequestDelegate nextDelgate) {
            next = nextDelgate;
        }

        public async Task Invoke(HttpContext context) {

            if (context.Request.Path == "/consent") {

                ITrackingConsentFeature consentFeature = context.Features.Get<ITrackingConsentFeature>();

                if (!consentFeature.HasConsent) {
                    consentFeature.GrantConsent();
                } else {
                    consentFeature.WithdrawConsent();
                }
                await context.Response.WriteAsync(consentFeature.HasConsent
                    ? "Consent Granted \n" : "Consent Withdrawn\n");
            }
            await next(context);
        }
    }

----------------------------------------------------------------------------------------------

public void Configure(IApplicationBuilder app) {
    app.UseDeveloperExceptionPage();
    app.UseCookiePolicy();
    app.UseMiddleware<ConsentMiddleware>();
    app.UseRouting();

----------------------------------------------------------------------------------------------

10. Using Sessions

--> The session middleware adds a cookie to responses, which allows related requests to be identified 
--> When a request containing the session cookie is received, the session middleware component retrieves the server-side data associated with the session

--> only the identifier for the session is sent to the browser.

----------------------------------------------------------------------------------------------

11. Configuring the Session Service and Middleware

--> Setting up sessions requires configuring services and adding a middleware component to the request pipeline.

            services.AddSession(options => {
                options.IdleTimeout = TimeSpan.FromMinutes(30);		--> identity cookie will be destroyed in 30 min
                options.Cookie.IsEssential = true;			--> It means even if user has declined consent, we will use identity cookie only for session.
            });


            app.UseSession();
            app.UseRouting();

----------------------------------------------------------------------------------------------

--> Caution:

--> The session cookie isn’t denoted as essential by default, which can cause problems when cookie consent is used. listing 16-7 sets the IsEssential property to true to ensure that sessions always work. if you find sessions don’t work as expected, then this is the likely cause, and you must either set IsEssential to true or adapt your application to deal with users who don’t grant consent and won’t accept session cookies.

----------------------------------------------------------------------------------------------

--> Methods in ISession interface accessed its object using context.Sessions

Clear()			--> Remove all data in session
GetString(key)	
GetInt32(key)		--> Retrieves an int value

Id			--> return unique identifier for the session
IsAvailable		--> is loaded with data
keys			--> enumerates the key for session data items

Remove(key) 		--> remove the value associated with key
SetString(k, v)
SetInt32(k, v)		

----------------------------------------------------------------------------------------------

        endpoints.MapGet("/cookie", async context => {
            int counter1 = (context.Session.GetInt32("counter1") ?? 0) + 1;
            int counter2 = (context.Session.GetInt32("counter2") ?? 0) + 1;
            context.Session.SetInt32("counter1", counter1);
            context.Session.SetInt32("counter2", counter2);
            await context.Session.CommitAsync();
            await context.Response
                .WriteAsync($"Counter1: {counter1}, Counter2: {counter2}");
        });

----------------------------------------------------------------------------------------------

12. Enabling HTTP Connections

--> Go to properties of project
--> Enable ssl

--> To generate Certificate in .net core

dotnet dev-certs https --clean
dotnet dev-certs https --trust

----------------------------------------------------------------------------------------------

13. Enforcing HTTPS Requests

app.UseHttpsRedirection();

----------------------------------------------------------------------------------------------

14. Enabling HTTP Strict Transport Security

--> One limitation of HTTPS redirection is that the user can make an initial request using HTTP before being redirected to a secure connection, presenting a security risk.

--> The HTTP Strict Transport Security (HSTS) protocol is intended to help mitigate this risk and works by including a header in responses that tells browsers to use HTTPS only when sending requests to the web application’s host

----------------------------------------------------------------------------------------------

            if (env.IsProduction()) {
                app.UseHsts();
            }

--> It is only enabled in production

----------------------------------------------------------------------------------------------

15. Returning an HTML Error Response

--> app.UseDeveloperExceptionPage()

--> This middleware is only used in Development showing Exception Page

----------------------------------------------------------------------------------------------

--> app.UseExceptionHandler("/error.html");

--> This middleware should be first in line
--> When an exception is thrown, the exception handler middleware will intercept the response and redirect the browser to the URL provided as the argument to the UseExceptionHandler method. 

--> One drawback, it does not preserve status code

----------------------------------------------------------------------------------------------

--> app.UseStatusCodePages("text/html", Responses.DefaultResponse);

----------------------------------------------------------------------------------------------

    app.Use(async (context, next) => {
        if (context.Request.Path == "/error") {
            context.Response.StatusCode = StatusCodes.Status404NotFound;
            await Task.CompletedTask;						--> No Work to do
        } else {
            await next();
        }
    });

----------------------------------------------------------------------------------------------

public static class Responses {
    public static string DefaultResponse = @"
        <!DOCTYPE html>
            <html lang=""en"">
            <head>
                <link rel=""stylesheet""
                   href=""/lib/twitter-bootstrap/css/bootstrap.min.css"" />
                <title>Error</title>
            </head>
            <body class=""text-center"">
                <h3 class=""p-2"">Error {0}</h3>
                <h6>
                    You can go back to the <a href=""/"">homepage</a> and try again
                </h6>
            </body>
        </html>";
    }

----------------------------------------------------------------------------------------------

request https://localhost:44350/error

----------------------------------------------------------------------------------------------

--> there are two related methods, UseStatusCodePagesWithRedirects and UseStatusCodePagesWithReExecute, which work by redirecting the client to a different Url or by rerunning the request through the pipeline with a different Url. in both cases, the original status code may be lost.

----------------------------------------------------------------------------------------------

16. Filtering Requests Using the Host Header

--> It filters Host domains.

--> In Configuration file,

  "AllowedHosts": "*"

----------------------------------------------------------------------------------------------

            services.Configure<HostFilteringOptions>(opts => {
                opts.AllowedHosts.Clear();
                opts.AllowedHosts.Add("*.example.com");
            });

--> Clear() methods tells not to take host domains from app.settings.json

----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------


