1. CreateDefaultBuilder method

--> Two functions:

1. Enable Kestral Server
2. Creating default services like logging 

----------------------------------------------------------------------------------------------

2. ConfigureWebHostDefaults method

--> Results of CreateDefaultBuilder is passed to this method
--> It sets up Startup Class

----------------------------------------------------------------------------------------------

3. Custom middleware

            app.Use(async (context, next) => {
                if (context.Request.Method == HttpMethods.Get
                        && context.Request.Query["custom"] == "true") {
                    await context.Response.WriteAsync("Custom Middleware \n");
                }
                await next();
            });

----------------------------------------------------------------------------------------------

4. Custom Middleware Class

    public class QueryStringMiddleWare {
        private RequestDelegate next;
        public QueryStringMiddleWare(RequestDelegate nextDelegate) {
            next = nextDelegate;
        }
        public async Task Invoke(HttpContext context) {
            if (context.Request.Method == HttpMethods.Get
                        && context.Request.Query["custom"] == "true") {
                await context.Response.WriteAsync("Class-based Middleware \n");
            }
            await next(context);
        }
    } 


app.UseMiddleware<QueryStringMiddleWare>();


----------------------------------------------------------------------------------------------

5. Some use cases of Request and Response object

context.Request.Method == HttpMethods.Get
context.Request.Query["custom"] == "true"
context.Response.WriteAsync("Custom Middleware \n")
context.Response.StatusCode
context.Request.Path == "/short"
context.Response.Redirect = "/population/monaco"		(Request.path)
context.Request.RouteValues					(dictionary)		
context.Response.StatusCode = StatusCodes.Status404NotFound;
context.Request.RouteValues["country"]	
context.Response.StatusCode = StatusCodes.Status404NotFound;

----------------------------------------------------------------------------------------------

6. Options Pattern

--> For configuring any class, we use options pattern
--> Configuration basically means changing some properties of class based on our need.

----------------------------------------------------------------------------------------------

--> Consider class used by our project

    public class MessageOptions {
        public string CityName { get; set; } = "New York";
        public string CountryName{ get; set; } = "USA";
    }


--> We can easily provide this class object to project using DI

services.AddScoped<MessageOptions>();

----------------------------------------------------------------------------------------------

--> Suppose we do not own this class and still we want to configure it (change some properties of it based on need)
--> We use options pattern

----------------------------------------------------------------------------------------------

using Microsoft.Extensions.Options;

        public void ConfigureServices(IServiceCollection services) {
            services.Configure<MessageOptions>(options => {
                options.CityName= "Albany";
            });
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, IOptions<MessageOptions> msgOptions) {

            app.Use(async (context, next) => {
                if (context.Request.Path == "/location") {
                    MessageOptions opts = msgOptions.Value;
                    await context.Response
                        .WriteAsync($"{opts.CityName}, {opts.CountryName}");
                } else {
                    await next();
                }
            });

----------------------------------------------------------------------------------------------

--> In any other class,

using Microsoft.Extensions.Options;
namespace Platform {

    public class LocationMiddleware {
        private RequestDelegate next;
        private MessageOptions options;

        public LocationMiddleware(RequestDelegate nextDelegate, IOptions<MessageOptions> opts) {
            next = nextDelegate;
            options = opts.Value;
        }

        public async Task Invoke(HttpContext context) {
            if (context.Request.Path == "/location") {
                await context.Response
                    .WriteAsync($"{options.CityName}, {options.CountryName}");
            } else {
                await next(context);
            }
        }
    } 
}



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------




























































