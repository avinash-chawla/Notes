1. Services

--> Services are objects that are shared between middleware components and endpoints. 

----------------------------------------------------------------------------------------------

2. Earlier

--> Singleton Pattern and TypeBroker Pattern

----------------------------------------------------------------------------------------------

1. Singleton Pattern 

--> Consumers of the TextResponseFormatter service obtaining a shared object through the static Singleton property

    public class TextResponseFormatter : IResponseFormatter {

        private int responseCounter = 0;

        private static TextResponseFormatter shared;

        public async Task Format(HttpContext context, string content) {
            await context.Response.
                WriteAsync($"Response {++responseCounter}:\n{content}");
        }

        public static TextResponseFormatter Singleton {
            get {
                if (shared == null) {
                    shared = new TextResponseFormatter();
                }
                return shared;
            }
        }
    }


            app.Use(async (context, next) => {
                if (context.Request.Path == "/middleware/function") {
                    await TextResponseFormatter.Singleton.Format(context,
                        "Middleware Function: It is snowing in Chicago");
                } else {
                    await next();
                }
            });

            app.UseEndpoints(endpoints => {
                endpoints.MapGet("/endpoint/class", WeatherEndpoint.Endpoint);
                endpoints.MapGet("/endpoint/function", async context => {
                    await TextResponseFormatter.Singleton.Format(context,
                        "Endpoint Function: It is sunny in LA");
                });
            });

----------------------------------------------------------------------------------------------

2. TypeBroker Pattern

--> Class provides access to singleton objects through their interfaces.

    public static class TypeBroker {
        private static IResponseFormatter formatter = new TextResponseFormatter();
        public static IResponseFormatter Formatter => formatter;
    } 

--> This class can change implementation at only one place instead of tightly coupling it.

----------------------------------------------------------------------------------------------

3. Dependency Injection

services.AddSingleton<IResponseFormatter, HtmlResponseFormatter>();

--> It does work of both patterns

----------------------------------------------------------------------------------------------

4. Getting Service in static Endpoint class

--> Benefit of Endpoint class is it has access to HttpContext object

	public static async Task Endpoint(HttpContext context) {

            IResponseFormatter formatter = context.RequestServices.GetRequiredService<IResponseFormatter>();
            await formatter.Format(context, "Endpoint Class: It is cloudy in Milan");
        }

----------------------------------------------------------------------------------------------

--> The HttpContext.RequestServices property returns an object that implements the IServiceProvider interfaces, which provides access to the services that have been configured in the application’s Start.ConfigureServices method

--> The IServiceProvider Extension Methods for Obtaining Services

1. GetService<T>()
2. GetService(type)
3. GetRequiredService<T>()		--> return Exception if not found
4. GetRequiredService(type)		--> return Exception if not found

----------------------------------------------------------------------------------------------

5. Using an Adapter Function

--> The drawback of using the HttpContext.RequestServices method is that the service must be resolved for every request that is routed to the endpoints.
--> A more elegant approach is to get the service when the endpoint’s route is created and not for each request. 

----------------------------------------------------------------------------------------------

    public class WeatherEndpoint {
        public static async Task Endpoint(HttpContext context, IResponseFormatter formatter) {
            await formatter.Format(context, "Endpoint Class: It is cloudy in Milan");
        }
    }

----------------------------------------------------------------------------------------------

    public static class EndpointExtensions {
        public static void MapWeather(this IEndpointRouteBuilder app, string path) {

            IResponseFormatter formatter = app.ServiceProvider.GetService<IResponseFormatter>();
            app.MapGet(path, context => Platform.WeatherEndpoint
                .Endpoint(context, formatter));
        }
    }

--> This IEndpointRouteBuilder has a method ServiceProvider which will provide any service object.

----------------------------------------------------------------------------------------------

endpoints.MapWeather("/endpoint/class");

----------------------------------------------------------------------------------------------

6. Using the Activation Utility Class

--> For endpoints that require services, it can often be easier to use a class that can be instantiated because it allows for a more generalized approach to handling services

        public static void MapEndpoint<T> (this IEndpointRouteBuilder app, string path, string methodName = "Endpoint") {

            MethodInfo methodInfo = typeof(T).GetMethod(methodName);

            if (methodInfo == null || methodInfo.ReturnType != typeof(Task)) {
                throw new System.Exception("Method cannot be used");
            }

            T endpointInstance = ActivatorUtilities.CreateInstance<T>(app.ServiceProvider);
            app.MapGet(path,  (RequestDelegate)methodInfo.CreateDelegate(typeof(RequestDelegate), endpointInstance));
        }

--> This Generic method CreateInstance requires IServiceProvider object to work with.

----------------------------------------------------------------------------------------------

7. Getting service from IApplicationBuilder object

IResponseFormatter formatter = app.ApplicationServices.GetService<IResponseFormatter>();

----------------------------------------------------------------------------------------------

8. Using Service Factory Functions

--> One use for factory functions is to define the implementation class for a service as a configuration setting, which is read through the IConfguration service. 

--> There are factory versions of the AddSingleton, AddTransient, and AddScoped methods, all of which are used with a function that receives an IServiceProvider object and returns an implementation object for the service.

        public void ConfigureServices(IServiceCollection services) {

            services.AddScoped<IResponseFormatter>(serviceProvider => {

                string typeName = Configuration["services:IResponseFormatter"];

                return (IResponseFormatter)ActivatorUtilities
                    .CreateInstance(serviceProvider, typeName == null
                        ? typeof(GuidService) : Type.GetType(typeName, true));
            });

            services.AddScoped<ITimeStamper, DefaultTimeStamper>();
        }

----------------------------------------------------------------------------------------------

  "services": {
    "IResponseFormatter": "Platform.Services.HtmlResponseFormatter"
  }

----------------------------------------------------------------------------------------------

9. Creating Services with Multiple Implementations

--> Services can be defined with multiple implementations, which allows a consumer to select an implementation that best suits a specific problem.

----------------------------------------------------------------------------------------------

    public interface IResponseFormatter {
        Task Format(HttpContext context, string content);
        public bool RichOutput => false;
    }

--> This RichOutput property will be false for implementation classes that don’t override the default value. 
--> To ensure there is one implementation that returns true, add the property shown in Listing 14-40 to the HtmlResponseFormatter class.

----------------------------------------------------------------------------------------------

    public class HtmlResponseFormatter : IResponseFormatter {
        public async Task Format(HttpContext context, string content) {
            context.Response.ContentType = "text/html";
            await context.Response.WriteAsync($@"
                <!DOCTYPE html>
                <html lang=""en"">
                <head><title>Response</title></head>
                <body>
                    <h2>Formatted Response</h2>
                    <span>{content}</span>
                </body>
                </html>");
        }
        public bool RichOutput => true;
    }

----------------------------------------------------------------------------------------------

            services.AddScoped<IResponseFormatter, TextResponseFormatter>();
            services.AddScoped<IResponseFormatter, HtmlResponseFormatter>();
            services.AddScoped<IResponseFormatter, GuidService>();

----------------------------------------------------------------------------------------------

            app.UseEndpoints(endpoints => {

                endpoints.MapGet("/single", async context => {
                    IResponseFormatter formatter = context.RequestServices
                        .GetService<IResponseFormatter>();
                    await formatter.Format(context, "Single service");
                });

                endpoints.MapGet("/", async context => {
                    IResponseFormatter formatter = context.RequestServices
                        .GetServices<IResponseFormatter>().First(f => f.RichOutput);
                    await formatter.Format(context, "Multiple services");
                });
            });

----------------------------------------------------------------------------------------------

--> The service is resolved using the most recently registered implementation, which is the GuidService class except one

----------------------------------------------------------------------------------------------

10. Using Unbound Types in Services

--> This feature relies on the versions of the AddSIngleton, AddScoped, and AddTransient methods that accept types as conventional arguments and cannot be performed using generic type arguments. 

services.AddSingleton(typeof(ICollection<>), typeof(List<>));

----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------


