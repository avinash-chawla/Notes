1. Component-->

--> It encapsuates data, html templates, logic for view
--> Root component of all components is App

------------------------------------------------------------------------

2. Modules-->

--> Group all related components

------------------------------------------------------------------------

3. Creating component-->

--> create a component
--> register it in a module
--> add an element in an html markup

src -> app -> navbar.component.ts

import { Component } from '@angular/core';

@Component({
	selector: 'navbar',
	template: '<h1>navbar</h1>'
})

export class NavbarComponent{}

--> One component contains one class, one html file 
--> Class contains all the necessary data (state) and state manipulation logic.

-------------------------------------------------------------------------

app.module.ts-->

@NgModule({
   declarations: [ NavbarComponent ]
});

------------------------------------------------------------------------

app.component.html-->

<h1>Angular</h1>
<navbar></navbar>

-----------------------------------------------------------------------

--> To make class into component class, we use @Component decorator

selector: increases html vocabulary

--> Similarly to make class into module, we use @NgModule decorator

--> both decorator takes an object as an input with some properties

------------------------------------------------------------------------

4. generating component through angular cli-->

--> ng g c sidebar 		(geneate component)

------------------------------------------------------------------------

5. Templates-->

--> Rendering data in templates dynamically-->

import { Component } from '@angular/core';

@Component({
	selector: 'navbar',
	template: '<h1>{{ title }}</h1>'
})
export class NavbarComponent{
	title = "List of Links";
}

--> above method is sometimes called data binding

----------------------------------------------------------------------------

--> Any javascript expression can be included between {{ }} --> called string interpolation.

<h1>{{ "Title: " + title }}</h1>

----------------------------------------------------------------------

export class NavbarComponent{
	title = "List of Links";

	getTitle() {
	   	return this.title;
	}
}

template: '<h1>{{ getTitle() }}</h1>';

------------------------------------------------------------------------

6. Directives-->

--> It is used for rendering data through control statements and loops like if, forloop

template: `<h1>{{ title }}</h1>
<ul>
	<li *ngFor="let course of courses">
		{{ course }}
	</li>
</ul>`

class CoursesComponent{
	courses = ["course1", "course2", "course3"];
}

------------------------------------------------------------------------

7. Services-->

--> Problem is when we use unit testing on component, component should not be directly coupled to httpservice
--> In unit testing, we provide fake httpservice

--> So those logic which are related to httpservice/api are moved to seperated file called courses.service.ts

--> In above problem, courses = ["course1", "course2", "course3"]; mostly come from api

--> courses.service.ts-->
export class CoursesService{
	getCourses() {
		return ["course1", "course2", "course3"];
	}
}

------------------------------------------------------------------------

8. Dependency Injection--->

--> To use service class in component class -->
--> We need to instantiate obj in component class.

export class CoursesComponent{
	courses;
	constructor() {
		let service = new Service();
		this.courses = service.getCourses();
	}		
}

--> But problem is we again directly coupled component class with httpservice class

-----------------------------------------------------------------------------

--> 2nd method --> provide dependency to component class in constructor

export class CoursesComponent{
	courses;
	constructor(service: CoursesService ) {
		this.courses = service.getCourses();
	}		
}

--> Now question is who will create object of it at runtime
--> Answer is dependency injection concept in angular 
--> Which automatically create instance of obj at runtime called injection

------------------------------------------------------------------------

--> declared in app.module.ts

providers: [ CoursesService ]	

--> Create only single instance in memory 
--> Can be used in many classes 
--> called Singleton pattern

--> Dependency Injection is used for following reasons:
1. Class should not be directly coupled, as it makes unit testing easier
2. We can change implementation of code at any time, without recompiling each class linked to it.

------------------------------------------------------------------------

9. Generating services using angular cli--->

ng g s emails	--> Generate two files --> emails.service.ts and spec.ts

@Injectable()	--> This decorator will inject dependencies for service class

--> In component class, @Component decorator is doing this job

------------------------------------------------------------------------


