1. Preparing Login/Register form

--> ng g c auth

<div class="row">
  <div class="col-xs-12 col-md-6 col-md-offset-3">
    <form>
      <div class="form-group">
        <label for="email">E-Mail</label>
        <input type="email" id="email" class="form-control" />
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" class="form-control" />
      </div>
      <div>
        <button class="btn btn-primary">Sign Up</button> |
        <button class="btn btn-primary">Switch to Login</button>
      </div>
    </form>
  </div>
</div>

-----------------------------------------------------------------------------------------------

2. Switching between Auth Modes (Register and Login)

export class AuthComponent {
  isLoginMode = true;

  onSwitchMode() {
    this.isLoginMode = !this.isLoginMode;
  }

  onSubmit(form: NgForm) {
    console.log(form.value);
    form.reset();
  }
}

-----------------------------------------------------------------------------------------------

<div class="row">
  <div class="col-xs-12 col-md-6 col-md-offset-3">
    <form #authForm="ngForm" (ngSubmit)="onSubmit(authForm)">
      <div class="form-group">
        <label for="email">E-Mail</label>
        <input
          type="email"
          id="email"
          class="form-control"
          ngModel
          name="email"
          required
          email
        />
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input
          type="password"
          id="password"
          class="form-control"
          ngModel
          name="password"
          required
          minlength="6"
        />
      </div>
      <div>
        <button
          class="btn btn-primary"
          type="submit"
          [disabled]="!authForm.valid"
        >
          {{ isLoginMode ? 'Login' : 'Sign Up' }}
        </button>
        |
        <button class="btn btn-primary" (click)="onSwitchMode()" type="button">
          Switch to {{ isLoginMode ? 'Sign Up' : 'Login' }}
        </button>
      </div>
    </form>
  </div>
</div>


--> <button type="button" ..> is neccessary, bec. by default in angular, button is an submit button

-----------------------------------------------------------------------------------------------

3. Preparing the Backend

--> Change the rules for database 

{
  "rules": {
    ".read": "auth != null",  // 2021-2-1
    ".write": "auth != null",  // 2021-2-1
  }
}

--> Enable Authentication in Authentication tab
--> Enable Sign-in method - Email/Password

-----------------------------------------------------------------------------------------------

4. Preparing the Signup Request

--> https://firebase.google.com/docs/reference/rest/auth?authuser=0
--> Sign up with email / password section

--> This will provide the endpoint on which users are registered
--> Check the Request Payload needed and what will be Response Payload generated

-----------------------------------------------------------------------------------------------

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { catchError } from 'rxjs/operators';
import { throwError } from 'rxjs';

interface AuthResponseData {
  kind: string;
  idToken: string;
  email: string;
  refreshToken: string;
  expiresIn: string;
  localId: string;
}

@Injectable({ providedIn: 'root' })
export class AuthService {
  constructor(private http: HttpClient) {}

  signup(email: string, password: string) {
    return this.http
      .post<AuthResponseData>(
        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDb0xTaRAoxyCgvaDF3kk5VYOsTwB_3o7Y',
        {
          email: email,
          password: password,
          returnSecureToken: true
        }
      ));
  }
}

--> By default, timeline of token validity is 1 hr.

--> You will get your apikey in setting of Project

-----------------------------------------------------------------------------------------------

5. Sending the Signup Request

  onSubmit(form: NgForm) {
    if (!form.valid) {
      return;
    }
    const email = form.value.email;
    const password = form.value.password;

    this.isLoading = true;
    if (this.isLoginMode) {
      // ...
    } else {
      this.authService.signup(email, password).subscribe(
        resData => {
          console.log(resData);
          this.isLoading = false;
        },
        errorMessage => {
          console.log(errorMessage);
          this.error = errorMessage;
          this.isLoading = false;
        }
      );
    }

    form.reset();
  }
}

--> Submit the form, you will see user is registered in Authenticated tab of firebase project.
--> If you resubmit the form with same username, Response will be Error with error message: Email Exists

--> In firebase user registeration, it is minimum length of Password is 6 characters

-----------------------------------------------------------------------------------------------

6. Adding a Loading Spinner and Error Handling Login

--> For loading spinners, go to website: https://loading.io/css/
--> or search css loading spinners

--> Create new folder --> shared
--> Create new component inside it: loading-spinner.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-loading-spinner',
  template:
    '<div class="lds-ring"><div></div><div></div><div></div><div></div></div>',
  styleUrls: ['./loading-spinner.component.css']
})
export class LoadingSpinnerComponent {}


-----------------------------------------------------------------------------------------------

--> For css file, copy the css code from any one : loading.io/css/

-----------------------------------------------------------------------------------------------

--> auth.component

  isLoginMode = true;					
  isLoading = false;						--> This Line
  error: string = null;

  onSubmit(form: NgForm) {
    if (!form.valid) {
      return;
    }
    const email = form.value.email;
    const password = form.value.password;

    this.isLoading = true;
    if (this.isLoginMode) {						--> This Line
      // ...
    } else {
      this.authService.signup(email, password).subscribe(
        resData => {
          console.log(resData);
          this.isLoading = false;						--> This Line
        },
        errorMessage => {
          console.log(errorMessage);
          this.error = errorMessage;
          this.isLoading = false;						--> This Line
        }
      );
    }

    form.reset();
  }

-----------------------------------------------------------------------------------------------

    <div class="alert alert-danger" *ngIf="error">
      <p>{{ error }}</p>
    </div>
    <div *ngIf="isLoading" style="text-align: center;">
      <app-loading-spinner></app-loading-spinner>
    </div>
    <form #authForm="ngForm" (ngSubmit)="onSubmit(authForm)" *ngIf="!isLoading">

-----------------------------------------------------------------------------------------------

7. Improving Error Handling

export class AuthService {
  constructor(private http: HttpClient) {}

  signup(email: string, password: string) {
    return this.http
      .post<AuthResponseData>(
        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDb0xTaRAoxyCgvaDF3kk5VYOsTwB_3o7Y',
        {
          email: email,
          password: password,
          returnSecureToken: true
        }
      )
      .pipe(
        catchError(errorRes => {
          let errorMessage = 'An unknown error occurred!';
          if (!errorRes.error || !errorRes.error.error) {
            return throwError(errorMessage);
          }
          switch (errorRes.error.error.message) {
            case 'EMAIL_EXISTS':
              errorMessage = 'This email exists already';
          }
          return throwError(errorMessage);
        })
      );
  }
}


--> throwError will return an observable with ErrorResponse send from API or anything we pass to it.

-----------------------------------------------------------------------------------------------

  onSubmit(form: NgForm) {
    if (!form.valid) {
      return;
    }
    const email = form.value.email;
    const password = form.value.password;

    this.isLoading = true;
    if (this.isLoginMode) {
      // ...
    } else {
      this.authService.signup(email, password).subscribe(
        resData => {
          console.log(resData);
          this.isLoading = false;
        },
        errorMessage => {
          console.log(errorMessage);
          this.error = errorMessage;
          this.isLoading = false;
        }
      );
    }

-----------------------------------------------------------------------------------------------

8. Sending Login Requests


export interface AuthResponseData {
  kind: string;
  idToken: string;
  email: string;
  refreshToken: string;
  expiresIn: string;
  localId: string;
  registered?: boolean;				--> optional property
}


  login(email: string, password: string) {
    return this.http
      .post<AuthResponseData>(
        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDb0xTaRAoxyCgvaDF3kk5VYOsTwB_3o7Y',
        {
          email: email,
          password: password,
          returnSecureToken: true
        }
      )
      .pipe(
        catchError(errorRes => {
          let errorMessage = 'An unknown error occurred!';
          if (!errorRes.error || !errorRes.error.error) {
            return throwError(errorMessage);
          }
          switch (errorRes.error.error.message) {
            case 'EMAIL_EXISTS':
              errorMessage = 'This email exists already';
          }
          return throwError(errorMessage);
        })
      );
  }

-----------------------------------------------------------------------------------------------

  onSwitchMode() {
    this.isLoginMode = !this.isLoginMode;
  }

  onSubmit(form: NgForm) {
    if (!form.valid) {
      return;
    }
    const email = form.value.email;
    const password = form.value.password;

    let authObs: Observable<AuthResponseData>;			--> Reducing Duplication of subscribe method in both login and register

    this.isLoading = true;

    if (this.isLoginMode) {
      authObs = this.authService.login(email, password);
    } else {
      authObs = this.authService.signup(email, password);
    }

    authObs.subscribe(
      resData => {
        console.log(resData);
        this.isLoading = false;
      },
      errorMessage => {
        console.log(errorMessage);
        this.error = errorMessage;
        this.isLoading = false;
      }
    );

    form.reset();
  }

-----------------------------------------------------------------------------------------------

9. Login Error Handling

  private handleError(errorRes: HttpErrorResponse) {
    let errorMessage = 'An unknown error occurred!';
    if (!errorRes.error || !errorRes.error.error) {
      return throwError(errorMessage);
    }
    switch (errorRes.error.error.message) {
      case 'EMAIL_EXISTS':
        errorMessage = 'This email exists already';
        break;
      case 'EMAIL_NOT_FOUND':
        errorMessage = 'This email does not exist.';
        break;
      case 'INVALID_PASSWORD':
        errorMessage = 'This password is not correct.';
        break;
    }
    return throwError(errorMessage);
  }

-----------------------------------------------------------------------------------------------

  login(email: string, password: string) {
    return this.http
      .post<AuthResponseData>(
        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDb0xTaRAoxyCgvaDF3kk5VYOsTwB_3o7Y',
        {
          email: email,
          password: password,
          returnSecureToken: true
        }
      )
      .pipe(
        catchError(this.handleError)
      );
  }

  signup(email: string, password: string) {
    return this.http
      .post<AuthResponseData>(
        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDb0xTaRAoxyCgvaDF3kk5VYOsTwB_3o7Y',
        {
          email: email,
          password: password,
          returnSecureToken: true
        }
      )
      .pipe(
        catchError(this.handleError)
      );
  }

-----------------------------------------------------------------------------------------------

10. Creating and Storing the User

--> user.model.ts

export class User {
  constructor(
    public email: string,
    public id: string,
    private _token: string,
    private _tokenExpirationDate: Date
  ) {}

  get token() {
    if (!this._tokenExpirationDate || new Date() > this._tokenExpirationDate) {
      return null;
    }
    return this._token;
  }
}


--> We use only getter here, no setter
--> getter looks like a method, and accessed as a property

-----------------------------------------------------------------------------------------------

export class AuthService {
  user = new Subject<User>();

  constructor(private http: HttpClient) {}

  signup(email: string, password: string) {
    return this.http
      .post<AuthResponseData>(
        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDb0xTaRAoxyCgvaDF3kk5VYOsTwB_3o7Y',
        {
          email: email,
          password: password,
          returnSecureToken: true
        }
      )
      .pipe(
        catchError(this.handleError),
        tap(resData => {
          this.handleAuthentication(
            resData.email,
            resData.localId,
            resData.idToken,
            +resData.expiresIn
          );
        })
      );
  }

  login(email: string, password: string) {
    return this.http
      .post<AuthResponseData>(
        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDb0xTaRAoxyCgvaDF3kk5VYOsTwB_3o7Y',
        {
          email: email,
          password: password,
          returnSecureToken: true
        }
      )
      .pipe(
        catchError(this.handleError),
        tap(resData => {
          this.handleAuthentication(
            resData.email,
            resData.localId,
            resData.idToken,
            +resData.expiresIn
          );
        })
      );
  }

  private handleAuthentication(
    email: string,
    userId: string,
    token: string,
    expiresIn: number
  ) {
    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);
    const user = new User(email, userId, token, expirationDate);
    this.user.next(user);
  }
}

-----------------------------------------------------------------------------------------------

11. Reflecting the Auth State in UI

  isAuthenticated = false;
  private userSub: Subscription;

  ngOnInit() {
    this.userSub = this.authService.user.subscribe(user => {
      this.isAuthenticated = !!user;
      console.log(!user);
      console.log(!!user);
    });
  }

  ngOnDestroy() {
    this.userSub.unsubscribe();
  }

-----------------------------------------------------------------------------------------------

	<li *ngIf="isAuthenticated">
          <a style="cursor: pointer;">Logout</a>
        </li>
        <li routerLinkActive="active" *ngIf="isAuthenticated">
          <a routerLink="/recipes">Recipes</a>
        </li>
        <li routerLinkActive="active" *ngIf="!isAuthenticated">
          <a routerLink="/auth">Authenticate</a>
        </li>

-----------------------------------------------------------------------------------------------

  user = new BehaviorSubject<User>(null);

  private handleAuthentication(
    email: string,
    userId: string,
    token: string,
    expiresIn: number
  ) {
    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);
    const user = new User(email, userId, token, expirationDate);
    this.user.next(user);
  }


-----------------------------------------------------------------------------------------------

12. Adding the Token to Outgoing Requests

-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------


v


















































































