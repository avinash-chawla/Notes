1. Types of Form Approaches

1. Template-driven
2. Reactive-driven	--> tightly coupled to ts class 

---------------------------------------------------------------------------------------------------

2. Template Driven

--> app.module.ts

 imports: [
    BrowserModule,
    FormsModule,
  ],

---------------------------------------------------------------------------------------------------

--> By including this module, Angular detects 'form' tags automatically and convert to Javascript Object representation of that form
--> Still JOR will only recognize form tag and not its input and other fields automatically, bec. user might not want to include them during form submission

--> You have to manually tell Angular which fields do you want to have control over it
--> For this we use ngModel on each input field, Angular will keep an eye over it

--> ngModel will bind the value, but where will it bind it ?
--> So it also needs name attribute to bind value to name field and make key-value pairs which will be helpful while submitting form

---------------------------------------------------------------------------------------------------

<form>
   <input type="text" name="email" ngModel />
   <button type="submit">Submit</button>
</form>

---------------------------------------------------------------------------------------------------

3. Submitting and using the Form

--> For Submitting form, we need event listener
--> We don't use method='post' or method='get' or action='nameofEventHandler'

--> We use Angular built-in directive -> (ngSubmit) on form tag to bind an EventHandler to it

---------------------------------------------------------------------------------------------------

<form (ngSubmit)="OnSubmit()">
   <input type="text" name="email" ngModel />
   <button type="submit">Submit</button>
</form>


  onSubmit() {
  }

---------------------------------------------------------------------------------------------------

--> local template variable

<form (ngSubmit)="OnSubmit(f)" #f>
   <input type="text" name="email" ngModel />
   <button type="submit">Submit</button>
</form>


import { Component, ElementRef } from '@angular/core';

  onSubmit(form: ElementRef) {
 	console.log(form);
  }


--> We will get the form but we will not get Javascript Object Representation of that form made by angular for us


---------------------------------------------------------------------------------------------------

--> Getting JOR of that form

<form (ngSubmit)="OnSubmit(f)" #f="ngForm">
   <input type="text" name="email" ngModel />
   <button type="submit">Submit</button>
</form>


import { NgForm } from '@angular/forms';

  onSubmit(form: ngForm ) {
 	console.log(form);
  }

--> Now you can see the JOR created by Angular
--> It has one property 'value' which contains our form values

---------------------------------------------------------------------------------------------------

4. Understanding Form State

--> Other properties given by ngForm object determine form state

--> eg

dirty: false	--> tells no value is written on form field yet
touched		--> whether clicked or not
valid		--> work after html validation attributes
errors		--> work after html validation attributes

---------------------------------------------------------------------------------------------------

5. Accessing the Form with @ViewChild

--> Right now, we are accessing ngForm inside ''onSubmit(f)'
--> There is concept of @ViewChild decorator in which you can get access to local template variable in ts class.

<form (ngSubmit)="onSubmit()" #f="ngForm">
 ...
</form>


@ViewChild('f') signUpForm: ngForm

onSubmit(){
   console.log(this.signUpForm);
}

---------------------------------------------------------------------------------------------------

6. Validation in Template Driven

--> Template driven means all code binds in template only, not go outside of it.

--> We use properties of ngForm to know the state of form
--> For validation in template driven, we use attributes which become selectors for ngForm object

<input type="text" required email>

--> email is not html attribute but a directive

---------------------------------------------------------------------------------------------------

--> Now we check the ngForm object, 
--> When we don't type something in field, valid: false
--> When we type something in field, valid: false (bec email attribute is remaining)
--> when we type correct email, valid: true

--> There are 2 levels: FormGroup and FormControl
--> There is one property FormGroup in ngForm object and inside it, there is list of FormControl objects --> depending upon fields in form

--> Each FormControl object has similar properties and one is valid: true/false
--> And valid at ngForm level determines overall state of form (if all fields are valid except one, then valid at ngform level would display: false

---------------------------------------------------------------------------------------------------

7. Class dynamically added by Angular in Template Driven

--> The field on which ngModel and other html validation attributes are filled are applied by class by Angular in them
--> classes like: ng-dirty ng-touched ng-valid

--> When field becomes valid, class applied is ng-valid
--> When field is invalid, class applied is ng-invalid

--> We can use it in styling

---------------------------------------------------------------------------------------------------

8. Using the Form State 'ngForm' in validating form

--> Disabling button

<button [disabled]='!f.valid' type='submit'>Submit</button>

---------------------------------------------------------------------------------------------------

--> Adding Styles


input.ng-invalid.ng-touched {
   border: 1px solid red;
}

---------------------------------------------------------------------------------------------------

--> What if:

.ng-invalid {
   border: 1px solid red;
}

--> This will create border around form tag also
--> Big giant red color border
--> No
---------------------------------------------------------------------------------------------------

input.ng-invalid{
   border: 1px solid red;
}

--> This will show border in starting of page only
--> Bec fields will be empty initially

---------------------------------------------------------------------------------------------------

9. Outputting Validation Error Messages

--> How to know whether current field is valid or not
--> We have ngForm object only yet

--> There is property inside property FormGroup of ngForm --> ngControl
--> We can have access to it just like ngForm

<input type="text" ngModel name="email" required email #email="ngModel"/>
<span #ngIf="!email.valid && email.touched">Please enter a valid Email</span>

---------------------------------------------------------------------------------------------------

10. Set Default Values with ngModel Property Binding

--> Currently values are provided by ngForm object
--> How to set default value to ngForm object then.

--> We can use [ngModel]="defaultvalue" to assign value to it

<select name="secret" [ngModel]="'pet'">
   <option value='pet'>..</option>
   <option value='teacher'>..</option>
</select>

---------------------------------------------------------------------------------------------------

or

<select name="secret" [ngModel]="defaultQuestion">
   <option value='pet'>..</option>
   <option value='teacher'>..</option>
</select>

ts file,

defaultQuestion='pet';

---------------------------------------------------------------------------------------------------

11. Using ngModel with two-way binding

  answer = '';



        <div class="form-group">
          <textarea
            name="questionAnswer"
            rows="3"
            class="form-control"
            [(ngModel)]="answer"></textarea>
        </div>
        <p>Your reply: {{ answer }}</p>

---------------------------------------------------------------------------------------------------

12. Grouping Form Controls

--> Sometimes, we want field values to be structured in specific way in json to response to api endpoint
--> We can do that using ngModelGroup directive to div element or any container element

<div id="user-data" ngModelGroup="userData">...</div>

--> userData becomes key for that

--> ngForm.value

{
  'secret': .., 
  'question': ..,
  'userData': {
	'username' : '..',
	'email' : '..'
  }
}

---------------------------------------------------------------------------------------------------

--> Sometimes, we want to validate a bunch

<div id="user-data" ngModelGroup="userData" #userData="ngModelGroup">...</div>

<p *ngIf="!userData.valid && userData.touched">User Data is invalid!</p>

---------------------------------------------------------------------------------------------------

--> Dynamic classes ng-touched, ng-valid are also applied to div element

---------------------------------------------------------------------------------------------------

--> See FormGroup contains 2 FormControl object and 1 FormGroup which contains 2 FormControl object, all inside ngForm object

---------------------------------------------------------------------------------------------------

13. Radio Buttons


  genders = ['male', 'female'];



<div class="radio" *ngFor="let gender of genders">
          <label>
            <input
              type="radio"
              name="gender"
              ngModel
              [value]="gender"
              required>
            {{ gender }}
          </label>
        </div>

---------------------------------------------------------------------------------------------------

14. Setting and Patching Form Values

--> We can set the value of form in ts file also

--> First we will get reference of ngForm using template variable using @ViewChild
--> Then it has property setValue taking javascript object which can be used to set all field values


<button
            class="btn btn-default"
            type="button"
            (click)="suggestUserName()">Suggest an Username</button>



  suggestUserName() {
    const suggestedName = 'Superuser';
    // this.signupForm.setValue({
    //   userData: {
    //     username: suggestedName,
    //     email: ''
    //   },
    //   secret: 'pet',
    //   questionAnswer: '',
    //   gender: 'male'
    // });
    this.signupForm.form.patchValue({
      userData: {
        username: suggestedName
      }
    });
  }

--> setValue (for setting all values)
--> patchValue (for setting specific values)

---------------------------------------------------------------------------------------------------

15. Using Form Data

  @ViewChild('f') signupForm: NgForm;

  user = {
    username: '',
    email: '',
    secretQuestion: '',
    answer: '',
    gender: ''
  };
  submitted = false;


  onSubmit() {
    this.submitted = true;
    this.user.username = this.signupForm.value.userData.username;
    this.user.email = this.signupForm.value.userData.email;
    this.user.secretQuestion = this.signupForm.value.secret;
    this.user.answer = this.signupForm.value.questionAnswer;
    this.user.gender = this.signupForm.value.gender;

    this.signupForm.reset();
  }

---------------------------------------------------------------------------------------------------

  <div class="row" *ngIf="submitted">
    <div class="col-xs-12">
      <h3>Your Data</h3>
      <p>Username: {{ user.username }}</p>
      <p>Mail: {{ user.email }}</p>
      <p>Secret Question: Your first {{ user.secretQuestion }}</p>
      <p>Answer: {{ user.answer }}</p>
      <p>Gender: {{ user.gender }}</p>
    </div>
  </div>

---------------------------------------------------------------------------------------------------

16. Resetting Form

--> Resetting Form is super easy

  onSubmit() {
    this.submitted = true;
    this.user.username = this.signupForm.value.userData.username;
    this.user.email = this.signupForm.value.userData.email;
    this.user.secretQuestion = this.signupForm.value.secret;
    this.user.answer = this.signupForm.value.questionAnswer;
    this.user.gender = this.signupForm.value.gender;

    this.signupForm.reset();
  }


--> To Reset Specific fields, use setValue or patchValue on event click

---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------













































































