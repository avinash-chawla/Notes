1. Module Introduction

--> Popup Components like Alert, ModalBox, FancyBox, sweetalert
--> Load a component dynamically
--> Overlay box component

----------------------------------------------------------------------------------------------

2. Alert-Box Component

--> html

<div class="backdrop" (click)="onClose()"></div>
<div class="alert-box">
  <p>{{ message }}</p>
  <div class="alert-box-actions">
    <button class="btn btn-primary" (click)="onClose()">Close</button>
  </div>
</div>


----------------------------------------------------------------------------------------------

--> css 

.backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.75);
  z-index: 50;
}

.alert-box {
  position: fixed;
  top: 30vh;
  left: 20vw;
  width: 60vw;
  padding: 16px;
  z-index: 100;
  background: white;
  box-shadow: 0 2px 8px rbga(0, 0, 0, 0.26);
}

.alert-box-actions {
  text-align: right;
}
 

----------------------------------------------------------------------------------------------

--> ts

import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-alert',
  templateUrl: './alert.component.html',
  styleUrls: ['./alert.component.css']
})
export class AlertComponent {
  @Input() message: string;
  @Output() close = new EventEmitter<void>();

  onClose() {
    this.close.emit();
  }
}


----------------------------------------------------------------------------------------------

--> Using AlertBox

<app-alert [message]="error" *ngIf="error" (close)="onHandleError()" ></app-alert>

  onHandleError() {
    this.error = null;
  }

----------------------------------------------------------------------------------------------

3. Preparing Programmatic Creation

--> We will not use above approach of calling child component and passing information
--> Rather we manually create componet in ts file and pass in the required information

----------------------------------------------------------------------------------------------

--> ts file


import { Component, ComponentFactoryResolver, ViewChild, OnDestroy } from '@angular/core';

  constructor( private authService: AuthService, private router: Router, private componentFactoryResolver: ComponentFactoryResolver ) {}

    authObs.subscribe(
      resData => {
        console.log(resData);
        this.isLoading = false;
        this.router.navigate(['/recipes']);
      },
      errorMessage => {
        console.log(errorMessage);
        this.error = errorMessage;
        this.showErrorAlert(errorMessage);			--> This Line
        this.isLoading = false;
      }
    );


  private showErrorAlert(message: string) {
    // const alertCmp = new AlertComponent();				
    const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory(AlertComponent);
  }


--> Creating instance of component:  This is not how Angular creates component
--> Angular uses ComponentFactoryResolver object

----------------------------------------------------------------------------------------------

--> For getting specific place where to render this component, we will use directive with ViewContainerRef object

import { Directive, ViewContainerRef } from '@angular/core';

@Directive({
  selector: '[appPlaceholder]'
})
export class PlaceholderDirective {
  constructor(public viewContainerRef: ViewContainerRef) {}
}


----------------------------------------------------------------------------------------------

import { AlertComponent } from './shared/alert/alert.component';
import { PlaceholderDirective } from './shared/placeholder/placeholder.directive';

  declarations: [
    AlertComponent,
    PlaceholderDirective
  ],

----------------------------------------------------------------------------------------------

4. Creating a Component Programmatically

--> placing Placeholder where component to be rendered

<ng-template appPlaceholder></ng-template>


  @ViewChild(PlaceholderDirective, { static: false }) alertHost: PlaceholderDirective;

  private showErrorAlert(message: string) {
    // const alertCmp = new AlertComponent();
    const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory(AlertComponent);
    const hostViewContainerRef = this.alertHost.viewContainerRef;
    hostViewContainerRef.clear();

    const componentRef = hostViewContainerRef.createComponent(alertCmpFactory);
  }


----------------------------------------------------------------------------------------------

  entryComponents: [
    AlertComponent
  ]

--> Add this property in ngModule decorator for angular versions less than < 9
--> Angular changes its render engine to IV from angular 9 onwards

----------------------------------------------------------------------------------------------

5. Data Binding and Event Binding

  private showErrorAlert(message: string) {
    // const alertCmp = new AlertComponent();
    const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory(
      AlertComponent
    );
    const hostViewContainerRef = this.alertHost.viewContainerRef;
    hostViewContainerRef.clear();

    const componentRef = hostViewContainerRef.createComponent(alertCmpFactory);

    componentRef.instance.message = message;
    this.closeSub = componentRef.instance.close.subscribe(() => {
      this.closeSub.unsubscribe();
      hostViewContainerRef.clear();
    });
  }


--> We get object of partial popup component using instance method of createComponent of ViewContainerRef object

----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------














































































