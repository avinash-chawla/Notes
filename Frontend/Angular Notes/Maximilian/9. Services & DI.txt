1. Why Dependency Injection

--> When two components wants to share information which are not nearby sibling or parent-child, then we can make use of services

--> Services are like singleton services

--> Consider as Central Repository

---------------------------------------------------------------------------------------------

2. Logging Service

---------------------------------------------------------------------------------------------

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  providers: ['LoggingService']
})
export class AppComponent implements OnInit {
	
	constructor(private loggingService: LoggingService) {}

	onSomeEvent(){
	    this.loggingService.logStatusChange("Some event take place");
}

---------------------------------------------------------------------------------------------

--> logging.service.ts

export class LoggingService {
  logStatusChange(status: string) {
    console.log('A server status changed, new status: ' + status);
  }
}

---------------------------------------------------------------------------------------------

3. Hierarchical Injector

1. AppModule
--> Same instance of Service is available Application-wide

2. AppComponent
--> Same instance of Service is available for all Components(but not for other Services)

3. Any other component
--> Same instance of Service is available for the Component and all its child components

---------------------------------------------------------------------------------------------

4. Data Service

import { EventEmitter, Injectable } from '@angular/core';

import { LoggingService } from './logging.service';

@Injectable()
export class AccountsService {
  accounts = [
    {
      name: 'Master Account',
      status: 'active'
    },
    {
      name: 'Testaccount',
      status: 'inactive'
    },
    {
      name: 'Hidden Account',
      status: 'unknown'
    }
  ];

  constructor(private loggingService: LoggingService) {}

  addAccount(name: string, status: string) {
    this.accounts.push({name: name, status: status});
    this.loggingService.logStatusChange(status);
  }

  updateStatus(id: number, status: string) {
    this.accounts[id].status = status;
    this.loggingService.logStatusChange(status);
  }
}

---------------------------------------------------------------------------------------------

5. @Injectable Decorator

--> When any service class needed service of other class, we use this @Injectable decorator
--> Like Logging service, does not need any dependency so we do not use @Injectable decorator

--> But to use it as globally, we need to place it in providers array in app.module.ts

providers: [LoggingService]

--> Above DataService has dependency of LoggingService class, so we use @Injectable decorator

---------------------------------------------------------------------------------------------

6. With Service

--> App.component.ts

export class AppComponent implements OnInit {
  accounts: {name: string, status: string}[] = [];

  constructor(private accountsService: AccountsService) {}

  ngOnInit() {
    this.accounts = this.accountsService.accounts;
  }
}


---------------------------------------------------------------------------------------------

--> app.component.html

<div class="container">
  <div class="row">
    <div class="col-xs-12 col-md-8 col-md-offset-2">
      <app-new-account></app-new-account>
      <hr>
      <app-account
        *ngFor="let acc of accounts; let i = index"
        [account]="acc"
        [id]="i"></app-account>
    </div>
  </div>
</div>

---------------------------------------------------------------------------------------------

--> new-account.component.ts

export class NewAccountComponent {

  constructor(private loggingService: LoggingService,
              private accountsService: AccountsService) {
    this.accountsService.statusUpdated.subscribe(
      (status: string) => alert('New Status: ' + status)
    );
  }

  onCreateAccount(accountName: string, accountStatus: string) {
    this.accountsService.addAccount(accountName, accountStatus);
    // this.loggingService.logStatusChange(accountStatus);
  }
}

---------------------------------------------------------------------------------------------

--> new-account.component.html

<div class="row">
  <div class="col-xs-12 col-md-8 col-md-offset-2">
    <div class="form-group">
      <label>Account Name</label>
      <input
        type="text"
        class="form-control"
        #accountName>
    </div>
    <div class="form-group">
      <select class="form-control" #status>
        <option value="active">Active</option>
        <option value="inactive">Inactive</option>
        <option value="hidden">Hidden</option>
      </select>
    </div>
    <button
      class="btn btn-primary"
      (click)="onCreateAccount(accountName.value, status.value)">
      Add Account
    </button>
  </div>
</div>

---------------------------------------------------------------------------------------------

--> account.component.ts

export class AccountComponent {
  @Input() account: {name: string, status: string};
  @Input() id: number;

  constructor(private loggingService: LoggingService,
              private accountsService: AccountsService) {}

  onSetTo(status: string) {
    this.accountsService.updateStatus(this.id, status);
    // this.loggingService.logStatusChange(status);
    this.accountsService.statusUpdated.emit(status);
  }
}


---------------------------------------------------------------------------------------------

--> account.component.html

<div class="row">
  <div class="col-xs-12 col-md-8 col-md-offset-2">
    <h5>{{ account.name }}</h5>
    <hr>
    <p>This account is {{ account.status }}</p>
    <button class="btn btn-default" (click)="onSetTo('active')">Set to 'active'</button>
    <button class="btn btn-default" (click)="onSetTo('inactive')">Set to 'inactive'</button>
    <button class="btn btn-default" (click)="onSetTo('unknown')">Set to 'unknown'</button>
  </div>
</div>


---------------------------------------------------------------------------------------------

7. Without Service

--> App.component.ts

export class AppComponent {
  accounts = [
    {
      name: 'Master Account',
      status: 'active'
    },
    {
      name: 'Testaccount',
      status: 'inactive'
    },
    {
      name: 'Hidden Account',
      status: 'unknown'
    }
  ];

  onAccountAdded(newAccount: {name: string, status: string}) {
    this.accounts.push(newAccount);
  }

  onStatusChanged(updateInfo: {id: number, newStatus: string}) {
    this.accounts[updateInfo.id].status = updateInfo.newStatus;
  }
}


---------------------------------------------------------------------------------------------

--> app.component.html

<div class="container">
  <div class="row">
    <div class="col-xs-12 col-md-8 col-md-offset-2">
      <app-new-account (accountAdded)="onAccountAdded($event)"></app-new-account>
      <hr>
      <app-account
        *ngFor="let acc of accounts; let i = index"
        [account]="acc"
        [id]="i"
        (statusChanged)="onStatusChanged($event)"></app-account>
    </div>
  </div>
</div>


---------------------------------------------------------------------------------------------

--> new-account.component.ts

export class NewAccountComponent {
  @Output() accountAdded = new EventEmitter<{name: string, status: string}>();

  onCreateAccount(accountName: string, accountStatus: string) {
    this.accountAdded.emit({
      name: accountName,
      status: accountStatus
    });
    console.log('A server status changed, new status: ' + accountStatus);
  }
}


---------------------------------------------------------------------------------------------

--> account.component.ts

export class AccountComponent {
  @Input() account: {name: string, status: string};
  @Input() id: number;
  @Output() statusChanged = new EventEmitter<{id: number, newStatus: string}>();


  onSetTo(status: string) {
    this.statusChanged.emit({id: this.id, newStatus: status});
    console.log('A server status changed, new status: ' + status);
  }
}

---------------------------------------------------------------------------------------------

8. Cross Communication through Services with EventEmitter without subscribe method

--> accounts.service.ts

  statusUpdated = new EventEmitter<string>();

---------------------------------------------------------------------------------------------

--> account.component.ts

  onSetTo(status: string) {
    this.accountsService.updateStatus(this.id, status);
    this.accountsService.statusUpdated.emit(status);
  }

---------------------------------------------------------------------------------------------

--> new-account.component.ts

  constructor(private loggingService: LoggingService,
              private accountsService: AccountsService) {
    this.accountsService.statusUpdated.subscribe(
      (status: string) => alert('New Status: ' + status)
    );
  }

---------------------------------------------------------------------------------------------

--> EventEmitter is just a wrapper around observable, so we can subscibe to it.
--> But we normally use observable rxjs library for this alert/updation


---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------






















































































