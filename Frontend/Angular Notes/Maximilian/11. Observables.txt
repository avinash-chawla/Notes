1. What are Observables

--> They are responsible for asynchronous tasks.
--> They have 3 events --> Handle Data, Handle error, Handle completion

--> They are considered as data sources / stream of data
--> Whenever data changes, observables emits it and data is catches by all subscribe methods.

---------------------------------------------------------------------------------------------

2. Example

  ngOnInit() {
    this.route.params.subscribe((params: Params) => {
      this.id = +params.id;
    });
  }

--> params is observable with data source of request params
--> We subscribe to them, to get the data whenever data changes

---------------------------------------------------------------------------------------------

3. Getting closer to Core of Observable


import { Component, OnDestroy, OnInit } from '@angular/core';
import { interval, Subscription } from 'rxjs';

  private firstObsSubscription: Subscription;

  ngOnInit() {
    this.firstObsSubscription = interval(1000).subscribe(count => {
      console.log(count);
    });
  }

  ngOnDestroy(): void {
    this.firstObsSubscription.unsubscribe();
  }

---------------------------------------------------------------------------------------------

--> interval is a observable provided by rxjs library
--> It returs count in every interval provided in parameter

--> We subscribe to it, and get count
--> As soon as, we go to home component, this count starts

--> But whenever, when we navigate from component, counting does not stop
--> Subscription never ends

--> All angular built-in observable are managed by angular, so it automatically destroyes subscription eg. this.route.params

---------------------------------------------------------------------------------------------

4. Building a Custom Observable

import { interval, Subscription, Observable } from 'rxjs';

 ngOnInit() {

    const customIntervalObservable = Observable.create(observer => {
      let count = 0;
      setInterval(() => {
        observer.next(count);
        }, 1000);
    });

    this.firstObsSubscription = customIntervalObservable.subscribe(data => {
      console.log(data);
    });
  }


  ngOnDestroy(): void {
    this.firstObsSubscription.unsubscribe();
  }

---------------------------------------------------------------------------------------------

--> To create custom observable

Observable.create

--> It will receive a callback function with 1 argument - observer	(it is referencing listener)
--> To pass data, we use next method

---------------------------------------------------------------------------------------------

5. Errors and Completion

  ngOnInit() {
    // this.firstObsSubscription = interval(1000).subscribe(count => {
    //   console.log(count);
    // });
    const customIntervalObservable = Observable.create(observer => {
      let count = 0;
      setInterval(() => {
        observer.next(count);
        if (count === 5) {
          observer.complete();
        }
        if (count > 3) {
          observer.error(new Error('Count is greater 3!'));
        }
        count++;
      }, 1000);
    });

    this.firstObsSubscription = customIntervalObservable.subscribe(data => {
      console.log(data);
    }, error => {
      console.log(error);
      alert(error.message);
    }, () => {
      console.log('Completed!');
    });
  }

--> There are 3 things which observables can send to observer - next(data), error(errMessage), complete()
--> We can listen to observables data, errMessage, complete using 3 callback functions


--> If observable sends error body then completed wont be called in observer

---------------------------------------------------------------------------------------------

6. Understanding Operators

--> They are filters which filters data coming from observable and reached to subscribe method

--> The subscribe method will receive data like starting from 'Round: 2' ...
--> We apply filters in chain inside pipe function and then subscribe to pipe function


import { map, filter } from 'rxjs/operators';

this.firstObsSubscription = customIntervalObservable
  .pipe(filter(data => {
      return data > 0;
    }), map((data: number) => {
      return 'Round: ' + (data + 1);
    })).subscribe(data => {
      console.log(data);
    }, error => {
      console.log(error);
      alert(error.message);
    }, () => {
      console.log('Completed!');
    });

---------------------------------------------------------------------------------------------

7. Subjects

--> We uses Services for communication between cross-locationed components
--> One way is to use EventEmitters to pass data and then subscribe to them in other component

--> Same feature can be implemented by Subject too.

---------------------------------------------------------------------------------------------

--> user.service.ts

import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';

@Injectable({providedIn: 'root'})
export class UserService {
  activatedEmitter = new EventEmitter<boolean>();
}


--> user.html

<button class="btn btn-primary" (click)="onActivate()">Activate</button>

--> user.ts

  constructor(private route: ActivatedRoute, private userService: UserService) {
  }

  onActivate() {
    this.userService.activatedEmitter.emit(true);
  }
}


--> app.component.ts

  userActivated = false;

  constructor(private userService: UserService) {
  }

  ngOnInit() {
    this.activatedSub = this.userService.activatedEmitter.subscribe(didActivate => {
      this.userActivated = didActivate;
    });
  }

  ngOnDestroy(): void {
    this.activatedSub.unsubscribe();
  }


--> app.html

<p *ngIf="userActivated">Activated!</p>

---------------------------------------------------------------------------------------------

--> With Subject

---------------------------------------------------------------------------------------------

--> user.service.ts

import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';

@Injectable({providedIn: 'root'})
export class UserService {
  activatedEmitter = new Subject<boolean>();
}


--> user.html

<button class="btn btn-primary" (click)="onActivate()">Activate</button>

--> user.ts

  constructor(private route: ActivatedRoute, private userService: UserService) {
  }

  onActivate() {
    this.userService.activatedEmitter.next(true);
  }

  ngOnDestroy(): void {
    this.activatedSub.unsubscribe();
  }
}


--> app.component.ts

  userActivated = false;

  constructor(private userService: UserService) {
  }

  ngOnInit() {
    this.activatedSub = this.userService.activatedEmitter.subscribe(didActivate => {
      this.userActivated = didActivate;
    });
  }


--> app.html

<p *ngIf="userActivated">Activated!</p>

---------------------------------------------------------------------------------------------

--> Subject is observable only, which gets data from outside the component and passes that data to subscriber

---------------------------------------------------------------------------------------------

8. 

---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------



































































