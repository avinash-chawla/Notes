--------------------------------------------------------------------------------

1. Debugging React Apps

--> There are two types of errors: Syntax and Logical
--> Syntax errors are easily found by React app

--> For logical errors, you will use browser source tabs
--> Place break point on number, and play next line with button provided below.

--------------------------------------------------------------------------------

2. React Developer Tools

--> Download this extension for chrome
--> It will add two tabs in chrome - Components and Profiler
--> In Components, you will see components with their state and props, you can go to source code, log them in console, change appearance in settings.
--> You can also use for debugging purpose.

--------------------------------------------------------------------------------

3. Using Error Boundaries (React 16+)

--> In Person.js,

const person = (props) => {
   const rnd = Math.random();

   if (rnd > 7) {
	throw new Error('Something went wrong');
   }
   return (..);

--> This will throw custom Exception
--> We will handle that using ErrorBoundaries.

--------------------------------------------------------------------------------

--> Make new folder --> ErrorBoundaries
--> Make new file   --> ErrorBoundaries.js
--> Any Component which throws exception, it will catch that
--> To implement this, we need to wrap whole component with this.

import React, { Component } from 'react';

class ErrorBoundary extends Component {

    state = {
        hasError: false,
        errorMessage: ''
    };

    componentDidCatch = (error, info) => {
        this.setState({ hasError: true, errorMessage: error})
    }
    
    render(){
      if(this.state.hasError){
          return <h1>{this.state.errorMessage}</h1>
      } else{
          return this.props.children
      }  
       
    }
}

export default ErrorBoundary;

--------------------------------------------------------------------------------

--> In App.js

if(this.state.showPersons)
    {
      persons = (
          <div>
            {this.state.persons.map((person, index) => {
              return <ErrorBoundary key = {person.id}>
                        <Person 
                          click ={() => this.deletePersonHandler(index)}
                          name={person.name} 
                          age={person.age} 
                          changed={(event) => this.nameChangedHandler(event, person.id)}/>
                    </ErrorBoundary>
            })}
          </div>
      )
      btnClass = classes.Red;
    }

--> ErrorBoundary will wrap all Person component in forloop, so key applied to it.
--> This will onlyy run in production mode.

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------



--------------------------------------------------------------------------------





































































