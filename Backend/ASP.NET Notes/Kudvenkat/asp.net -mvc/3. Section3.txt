1. Auto Generate CRUD Operations Application
--> Model = EntityModel autogenerated
--> Controller and View autogenerated

-----------------------------------------------------------------------------------------------------

2. Customizing the autogenerated index view-->

--> Give table border and font-family 
--> Table Columns became model property automatically
--> Can we Modify autogenerated Employee Model class, Answer is NO

--> We use MetaData attribute to pass additional information to already existed class
--> Class is partial means class content is divided at different places, when compiled, all combine at one.

--> Make new class Department.cs in Model


    using System.ComponentModel.DataAnnotations;

    [MetadataType(typeof(DepartmentMetaData))]			---> Attribute
    public partial class Department				---> partial class
    {
    }

    public class DepartmentMetaData				---> Metadata class
    {
        [Display(Name = "Department Name")]			---> Changing Name in View with Display Attribute
        public string Name { get; set; }			---> Already existed Method in model
    }

-----------------------------------------------------------------------------------

3. Customizing the autogenerated create View-->

--> Change TextBox to DDL in Gender in Create View-->

@Html.DropDownList("Select Gender", new List<SelectListItem>
       {
           new SelectListItem { Text = "Male", Value="Male"},
           new SelectListItem { Text = "Female", Value="Female"},
       }, "Select")


--> Make fields required-->

--> We can not modify autogenerated template Employee.designer.cs
--> So make new class in model, name it Employee.cs
--> If already builded Employee.cs, modify following changes as below in that

using System.ComponentModel.DataAnnotations;

    [MetadataType(typeof(EmployeeMetaData))]
    public partial class Employee
    {
    }

    public class EmployeeMetaData
    {
        [Required]
        public string Name { get; set; }
        [Required]
        public string Gender { get; set; }
        [Required]
        public string City { get; set; }
        [Required]
        [Display(Name = "Department")]			
        public int DepartmentId { get; set; }
    }

---> Display Name by default is DepartmentId so changing it by attribute, DepartmentId is displayed when showing required fields message

--------------------------------------------------------------------------------------

4. Customizing the autogenerated edit view-->

--> Replace Gender TextBox with DDL
--> First Option of Select Department is Empty so make replace it in view ( string.Empty --> "Select Department")
--> Font-family: arial

--> Make name field readonly by replacing EditorFor with DisplayFor
--> Also add HiddenFor(model => model.Name) to pass value of Name to EntityModel

--> 3 Ways to prevent Unintended inputs using fidler in name field-->

1. UpdateModel
2. Model Binder attribute
3. Interface

--> We use Model Binder in this-->

--> Edit ActionMethod in EmployeeController-->

	[HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Exclude="Name")]Employee employee)
        {

            Employee employeeFromDB = db.Employees.Single(em => em.EmployeeId == employee.EmployeeId);

            employeeFromDB.Gender = employee.Gender;
            employeeFromDB.City = employee.City;
            employeeFromDB.DepartmentId = employee.DepartmentId;

            if (ModelState.IsValid)
            {
                db.Entry(employeeFromDB).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.DepartmentId = new SelectList(db.Departments, "Id", "Name", employee.DepartmentId);
            return View(employee);
        }


--> Applied Data binder attribute in parameter
--> Updating db record in only 3 fields and getting name field from db.


-----------------------------------------------------------------

--> Still shows error for Required Fields bec. ModelState.IsValid is still validating input from user
--> Solution: Remove Required attribute from Employee.cs

------------------------------------------------------------------

--> Problem will be in create view, we want field to be required to be inputed from the user.
--> Dynamically add model View Errors -->

--> In HttpPost Create ActionMethod-->

if(string.IsNullorEmpty(employee.Name))
{
	ModelState.AddModelError("Name", "The Name field is required");
}

-------------------------------------------------------------------------------

5. Using data transfer object as the model-->

--> Our business requirement is such that, we want to display total number of employees by department. At that moment, model class does not have Total property.

--> This is one example where a Data Transfer Object can be used as a model.

--------------------------------------------------------------------------------

--> Make a model class named DepartmentTotals.cs

public class DepartmentTotals
{
     public string Name { get; set; }
     public int Total { get; set; }
}

----------------------------------------------------------------------------

--> Sql Query for that-->

select 	tblDepartment.Name, Count(*) as Total
from 	tblEmployee
join 	tblDepartment
on 	tblDepartment.Id = tblEmployee.DepartmentId
groupBy tblDepartment

--> Only for information
------------------------------------------------------------------------------------------------

--> Make a actionMethod for Getting total Employees in each department-->

--> In EmployeeController-->

public ActionResult EmployeesByDepartment()
        {
            var employees = db.Employees.Include(e => e.Department)
                .GroupBy(x => x.Department.Name)
                .Select(y => new DepartmentTotals
                    {
                        Name = y.Key,
                        Total = y.Count()
                    }).ToList().OrderByDescending(y => y.Total);
            return View(employees);
        }

--> In Above LINQ commands are used
---------------------------------------------------------------------

--> Making View for this actionMethod-->

--> right click actionMethod
--> strongly typed --> Model: DepartmentTotals  --> Template: List
--> Give table border and remove third column

---------------------------------------------------------------------------

6. View Engines in asp.net-->

--> There are two: Razor and Aspx
--> ServerSide code is wrapped between @ in Razor and <%...%> in aspx

--> Other diff is razor view extension changes with CS and VB (.cshtml and .vbhtml)

--> There are no major difference between these two.
-----------------------------------------------------------

--> Normally actionMethod name and View for that actionMethod name are same.
--> Sometimes, we want to change them.
--> There is one overloaded version of View method which takes View Name also

public ActionResult Index()
{
	var employees = db.Employees.Include("Department");
	return View("List", employees.ToList());
}

--> View(string viewName, object) 

---------------------------------------------------------------------------------

7. Other custom View engines-->

1. Spark    --> Spark.Web.Mvc4  from nuget package manager
2. NHarml
3. SharpDOM
4. Brail

--> Installed using Nuget package manager.

-----------------------------------------------------------------------

--> Install Spark.Web.Mvc4 from nuget package manager
--> Go to this path:

C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\ItemTemplates\CSharp\Web\MVC 4\CodeTemplates\AddView

--> copy and paste path in run command or go directly

--> make a folder in AddView named "Spark"
--> inside it, make xml file named "ViewEngine"

<?xml version="1.0" encoding="utf-8" ?>
<ViewEngine DisplayName="Spark"
 ViewFileExtension=".spark"
 DefaultLayoutPage="~/Views/Shared/_Layout.spark"
 PartialViewFileExtension=".spark" />

------------------------------------------------------------

--> Check by right click any actionMethod and see other viewEngines in selectBox
--> .tt are template files present in aspx and razor viewEngine foler so we can see them.

---------------------------------------------------------------------------------

8. How does a controller find a view in mvc-->

--> By convention MVC looks for a view with the same name as that of the controller action method name in the following locations
1. Views/FolderNameMatchingControllerName
2. Views/Shared

--> View extension can be any of following-->
1. .cshtml
2. .vbhtml
3. .aspx
4. .ascx

--> If all files are of same name-->

Index.aspx (default, if not mentioned)
Index.cshtml
Index.vbhtml
Index.ascx

--> Specify full path in View method
return View("~/Views/Employee/Index.cshtml", employees.ToList());

-----------------------------------------------------------------------------

9. Html helpers-->

--> It is a method that is used to render html content in a view.
--> They are implemented as extension methods

--> To produce the Html textbox with id="firstname" name="firstname"

--> <input type="text" name="firstname" id="firstname" />
--> @Html.TextBox("firstname")

--> Html helpers reduce the amount of HTML in view. All complicated can be encapsulated in Html helper.

--> @Html.TextBox("firstname", "John") 		---> also sets value

--> @Html.TextBox("firstname", "John", 
	new 
	{
		style = "background-color: Red; color: White, font-weight: bold",
		title="Please enter your first name"
	})

--> title is tooltip 

---------------------------------------------------------------------------------

--> All css classes are defined in Content folder, Site.css

--> @Html.TextBox("firstname", "John", new { @class = "redtextbox", @readonly = "true" })
--> class is a reserved keyword so @ symbol before class
--> Also provide link tag of Site.css in view file to use css class(just drag and drop)

----------------------------------------------------------------------------------

--> @Html.Label("firstname", "First Name")	(id, display_name)
--> @Html.Password("Password")
--> @Html.TextArea("Comments", "", 5, 20, null) (name, value, row, col, object htmlAttributes)
--> @Html.Hidden("Id")		--> hidden field
<input type="hidden">

--> Hidden textbox is used to store id values. They are not displayed to the user.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

10. DDL using HTML helper-->

@Html.DropDownList("Departments", new List<SelectListItem>
{
	new SelectListItem { Text = "IT", Value = "1", Selected = true },
	new SelectListItem { Text = "IT", Value = "2"}
	new SelectListItem { Text = "Payroll", Value = "3"}	
}, "Select Department")

-----------------------------------------------------------------------------

--> Now using database

--> We will use entity framework to autogenerate connection
--> make new application, choose that template in which HomeControlled comes, in my case, .net(4.5) mvc template.
--> right click model --> Add item --> Asp.net entity model --> name it SampleDataModel --> name Context file "SampleDBContext" --> select table: "tblDepartment"

--> In Index method of Home Controller-->

public ActionResult Index()
        {
            SampleDBContext dbContext = new SampleDBContext();
            ViewBag.Departments = new SelectList(dbContext.Departments, "Id", "Name");
            return View();
        }

DBContext = DataBase = collection of tables
--> second param is DataValueField and third param is DataTextField from tables.

--> In view of this actionMethod-->

@Html.DropDownList("Departments", "Select Department");


----------------------------------------------------------------------------------

11. How to set an item selected in ddl if data is loaded from db-->

--> 1stway: In SelectList class

ViewBag.Departments = new SelectList(db.Departments, "Id", "Name", "1");

----------------------------------------------------------

--> 2nd way: DataBase

--> Add one column IsSelected in tblDepartment

Alter table tblDepartment
add IsSelected BIT		--> type BIT

Update tblDepartment set IsSelected = 1 where Id = 1

--------------------------------------------------------------------------------

--> Refresh DB --> go to edmx designer --> right click table --> Update Model from database --> Refresh tab --> select that table --> finish

--> Make changes in Index actionMethod of Home Controller-->

	public ActionResult Index()
        {
            SampleDBContext db = new SampleDBContext();
            List<SelectListItem> selectListItems = new List<SelectListItem>();

            foreach (Department department in db.Departments)
            {
                SelectListItem selectListItem = new SelectListItem()
                {
                    Text = department.Name,
                    Value = department.Id,
                    Selected = department.IsSelected.HasValue ? department.IsSelected.Value ? false;

                }
                selectListItems.Add(selectListItem);
            }

            ViewBag.Departments = selectListItems;
            return View();
        }



--> db.Departments will return Department model (called DBSet object)


--------------------------------------------------------------------------------------

12. Difference between Html TextBox and Html TextBoxFor-->

--> Html.TextBox and Html.DropDownList are not strongly typed and hence they doesn't require a strongly typed view.
--> Means that we can hardcore whatever name we want using ViewBag property

--> While, Html.TextBoxFor and Html.DropDownListFor are strongly typed and requires a strongly typed view, and the name is inferred from the lambda expression from model directly, no ViewBag property

--> Strongly typed HTML helpers provide compile time checking

--> So, Html.TextBoxFor and Html.DropDownListFor are used more.

--> The end result is same in both.
------------------------------------------------------------------------------------
--> demo-->

--> Make new model class name Company.cs-->

public class Company
    {
        public string _name;
        public Company(string name)
        {
            this._name = name;
        }

        public List<Department> Deparments
        {
            get{
                SampleDBContext db = new SampleDBContext();
                return db.Departments.ToList();
            }
            
        }

        public string CompanyName
        {
            get{
                return this._name;
            }
            set{
                this._name = value;
            }
        }
}

--> This class contains two fields _name (CompanyName) and departments

----------------------------------------------------------------------------

--> In HomeController, In Index method-->

public ActionResult Index()
{

Company company = new Company("Pragim");	--> initialize name property

ViewBag.Departments = new SelectList(company.Departments, "Id", "Name");
ViewBag.CompanyName = company.CompanyName

return View();

}

----------------------------------------------------------------

--> In View of this ActionMethod -->
--> Remember to not check strongly typed reference, bec. its of no use

@Html.TextBox("CompanyName", (string)ViewBag.CompanyName)
<br />
@Html.DropDownList("Departments", "Select Department")

--------------------------------------------------------------------------------

--> Now same example using Html TextBoxFor and DropDownListFor -->

public ActionResult Index()
{

Company company = new Company("Pragim");	--> initialize name property
return View(company);

}

---------------------------------------------------------------------------

--> Creating view for this actionMethod-->
--> Check strongly typed reference and template: empty

@Html.TextBoxFor(m => m.CompanyName)
<br />
@Html.DropDownList(m => m.Departments, new SelectList(Model.Departments, "Id", "Name"), "Select Department");

--> Using directly model properties here, no need to use ViewBag properties to pass data from model to controller to view.

--------------------------------------------------------------------------------

13. Generating a radioButton control using Html helper-->

--> Company.cs in model folder-->

public class Company
    {
        public string SelectedDepartment { get; set; }

        public List<Department> Departments
        {
            get
            {
                SampleDBContext db = new SampleDBContext();
                return db.Departments.ToList();
            }
        }
}

--------------------------------------------------------------
--> Action Method in HomeController-->

[HttpGet]
        public ActionResult Index()
        {
            Company company = new Company();
            return View(company);
        }

        [HttpPost]
        public string Index(Company company)
        {
            if(string.IsNullOrEmpty(company.SelectedDepartment))
            {
                return "You did not select any department";
            }
            else
            {
                return "You selected department with ID: " + company.SelectedDepartment;
            }
        }

------------------------------------------------------------------------------------

--> View for this actionMethod-->
--> choose strongly typed reference

@using(Html.BeginForm())
{
    foreach (var department in Model.Departments)
    {
        @Html.RadioButtonFor(m => m.SelectedDepartment, department.Id) @department.Name
    }
    <br />
    <br />
    <input type="submit" value="Submit" />
}

--> using is to open and close tag of form automatically

------------------------------------------------------------------------------

--> Already checked radio button

@Html.RadioButtonFor(m => m.SelectedDepartment, department.Id,
	(department.IsSelected.HasValue && department.IsSelected.Value) ? new { @checked = "checked" }
) @department.Name


------------------------------------------------------------------------------

14. CheckBoxList using Html Helper-->

create table tblCity
(
ID int primary key identity,
Name nvarchar(20),
IsSelected BIT
)

insert into tblCity Values ('London', 0)
insert into tblCity Values ('New York', 0)
insert into tblCity Values ('Sydney', 1)
insert into tblCity Values ('Mumbai', 0)
insert into tblCity Values ('Cambridge', 0)

------------------------------------------------------------------------------

--> Create Entity Model from availble database-->

--> DataModel = SampleDataModel
--> ContextName = SampleDBContext
--> Table = tblCity
--> Name Table = City

--> SampleDBModel and City are two classes generated in SampleDataModel.cs
--> One is database class and other is table class, we use as objects.

------------------------------------------------------------------------------

--> Index ActionMethod in HomeController-->

using MVCDemo.Models;

[HttpGet]
public ActionResult Index()
{
	SampleDBContext db = new SampleDBContext();
	return View(db.Cities);
}

[HttpPost]
public string Index(IEnumerable<City> cities)
{
	if(cities.Count(x => x.IsSelected) == 0)
	{
		return "You didn't select any City";
	}

	else
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("You Selected - ");
		foreach(City city in cities)
		{ 
			if(city.IsSelected)
			{
				sb.Append(city.Name + ",");
			}
		}
		sb.Remove(sb.ToString().LastIndexOf(","), 1);		---> To remove last appended comma(,)
		return sb.ToString();
	}
}

--------------------------------------------------------------------------

--> View-->

@model IEnumerable<MVCDemo.Models.City>

<div style="font-family: Arial">
<h2>Index</h2>
@using(Html.BeginForm())
{
	@Html.EditorForModel()		
	<br />
	<input type="submit" value="Submit" />
}
</div>

--> EditorForModel looks for view which has same name as Model that is City.cshtml

--------------------------------------------------------------------------

--> In ViewFoler --> Make new folder name EditorTemplates , inside it make City.cshtml

@model MVCDemo.Models.City

@Html.HiddenFor(x => x.ID)
@Html.HiddenFor(x => x.Name)

@Html.CheckBoxFor(x => x.IsSelected)			---> Automatically loops through Each City record
@Html.DisplayFor(x => x.Name)


--> Hidden Values are send to the server during postBack button automatically.

------------------------------------------------------------------------------

15. ListBox in asp.net mvc-->

--> We will use ViewModel in this example.
--> ViewModel is a class specific to View 

--> Make new class in model named CitiesViewModel-->

using System.Web.Mvc;			--> for SelectListItem
public class CitiesViewModel
{
	public IEnumerable<SelectListItem> Cities { get; set; }
	public IEnumerable<string> SelectedCities { get; set; }