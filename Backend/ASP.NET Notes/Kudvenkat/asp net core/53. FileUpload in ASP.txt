--> We want to be able upload Employee photo using the Photo field on the form.

---------------------------------------------------------------------------------

1. Employee Model Class

--> When this Create Employee Form is submitted, we want to store Employee data i.e Name, Email, Department and PhotoPath in Employees database table. 

public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public Dept? Department { get; set; }
    public string PhotoPath { get; set; }
}

---------------------------------------------------------------------------------

2. EmployeeCreateViewModel Class

--> We will have fileupload input in form to upload employee images.
--> When this image comes to server, IFormFile datatype will create copy of it and paste in static folder.

--> In Employee Database, we will store the path of image in database and image in static folder
--> So while displaying detail or list of employee, we will use this path

--> If we use string property for PhotoPath, string does not provide bunch of useful methods to deal with image path, copyTo
--> For that we use IFormFile interface as type of image
--> Also, we want string in database in Employee Table

--> Solution:
--> We will provide ViewModel to 'Create' form view file. 
--> Bec. Employee Domain class is linked with database and in database, we want field PhotoPath which is path to image in String datatype.
--> Modelbinding will use this IFormFile to work with image
--> And while storing imagePath, we will use string property of Employee

---------------------------------------------------------------------------------

--> Make new class in ViewModel folder

--> EmployeeCreateViewModel Class

public class CreateViewModel
{
    public string Name { get; set; }
    public string Email { get; set; }
    public Dept? Department { get; set; }
    public IFormFile Photo { get; set; }
}

---------------------------------------------------------------------------------

3. IFormFile

--> The interface IFormFile has the following properties and methods
--> Go to Definition of IFormFile --> You will see below code

public interface IFormFile
{
    string ContentType { get; }
    string ContentDisposition { get; }
    IHeaderDictionary Headers { get; }
    long Length { get; }
    string Name { get; }
    string FileName { get; }
    Stream OpenReadStream();
    void CopyTo(Stream target);
    Task CopyToAsync(Stream target, CancellationToken cancellationToken = null);
}

--> This type will be handled by ModelBinding from 'create' form.

---------------------------------------------------------------------------------

4. Create View Code

--> We are using reference of ViewModel
--> Added new column for File Upload in below form.
--> When we upload a file, it does not show name, for that, we have used jquery which is in section below.
--> We have't used input type="file" because this work is done by asp-for attribute which is referencing IFormFile Photo

@model EmployeeCreateViewModel

@{
    ViewBag.Title = "Create Employee";
}

@*To support file upload set the form element enctype="multipart/form-data" *@

<form enctype="multipart/form-data" asp-controller="home" asp-action="create"
      method="post" class="mt-3">
...

<div class="form-group row">
        <label asp-for="Photo" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <div class="custom-file">
                <input asp-for="Photo" class="form-control custom-file-input">
                <label class="custom-file-label">Choose File...</label>
            </div>
        </div>
    </div>

...

@section Scripts {
        <script>
            $(document).ready(function () {
                $('.custom-file-input').on("change", function () {
                    var fileName = $(this).val().split("\\").pop();
                    $(this).next('.custom-file-label').html(fileName);
                });
            });
        </script>
    }

---------------------------------------------------------------------------------

5. Create Action Method

--> ModelBinding is receiving ViewModel, it has a property Photo of type IFormFile
--> To get location of wwwroot folder, we are using IHostingEnvironment service dependency injection
--> To work with Path, we have imported System.IO
--> To avoid duplication of image filePath, we have Guid number 
--> We have used FileStream to copy all its content
--> After copying image from ModelBinding object to static folder, we are saving its location on Employee table by creating its instance.
--> After all operations, we are redirecting user to details page.

using Microsoft.AspNetCore.Hosting;
using System.IO;

	private readonly IEmployeeRepository _employeeRepository;
        private readonly IHostingEnvironment hostingEnvironment;

        public HomeController(IEmployeeRepository employeeRepository,
                              IHostingEnvironment hostingEnvironment)
        {
            _employeeRepository = employeeRepository;
            this.hostingEnvironment = hostingEnvironment;
        }


  	[HttpPost]
        public IActionResult Create(EmployeeCreateViewModel model)
        {
            if (ModelState.IsValid)
            {
                string uniqueFileName = null;

                // If the Photo property on the incoming model object is not null, then the user
                // has selected an image to upload.

                if (model.Photo != null)
                {
                    // The image must be uploaded to the images folder in wwwroot
                    // To get the path of the wwwroot folder we are using the inject
                    // HostingEnvironment service provided by ASP.NET Core

                    string uploadsFolder = Path.Combine(hostingEnvironment.WebRootPath, "images");

                    // To make sure the file name is unique we are appending a new
                    // GUID value and and an underscore to the file name

                    uniqueFileName = Guid.NewGuid().ToString() + "_" + model.Photo.FileName;
                    string filePath = Path.Combine(uploadsFolder, uniqueFileName);

                    // Use CopyTo() method provided by IFormFile interface to
                    // copy the file to wwwroot/images folder

                    model.Photo.CopyTo(new FileStream(filePath, FileMode.Create));
                }

                Employee newEmployee = new Employee
                {
                    Name = model.Name,
                    Email = model.Email,
                    Department = model.Department,

                    // Store the file name in PhotoPath property of the employee object
                    // which gets saved to the Employees database table

                    PhotoPath = uniqueFileName
                };

                _employeeRepository.Add(newEmployee);
                return RedirectToAction("details", new { id = newEmployee.Id });
            }

            return View();
        }
    }
}

---------------------------------------------------------------------------------

6. Setting Image in Details and Index View from location

--> Details View Code

@model HomeDetailsViewModel

@{
    ViewBag.Title = "Employee Details";
    var photoPath = "~/images/" + (Model.Employee.PhotoPath ?? "noimage.jpg");
}

...

<div class="card-body text-center">
                <img class="card-img-top" src="@photoPath" asp-append-version="true" />

---------------------------------------------------------------------------------

7. Index View Code

...
<div class="card-deck">
    @foreach (var employee in Model)
    {
        var photoPath = "~/images/" + (employee.PhotoPath ?? "noimage.jpg");
        <div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
            <div class="card-header">
                <h3>@employee.Name</h3>
            </div>

            <img class="card-img-top imageThumbnail" src="@photoPath"
                 asp-append-version="true" />

---------------------------------------------------------------------------------

8. Similarity in Image Sizes

--> To set image all of same size
--> In site.css 

.imageThumbnail {
    height:200px;
    width:auto;
}

---------------------------------------------------------------------------------








































