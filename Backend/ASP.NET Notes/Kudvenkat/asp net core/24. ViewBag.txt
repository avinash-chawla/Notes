1. ViewBag

--> We are using dynamic properties (Title and Properties) on the ViewBag instead of string keys.

--> Controller class

public ViewResult Details()
{
    Employee model = _employeeRepository.GetEmployee(1);

    ViewBag.PageTitle = "Employee Details";
    ViewBag.Employee = model;

    return View();
}

----------------------------------------------------------------------------------

2. Accessing ViewBag in View file

<html>
<head>
    <title></title>
</head>
<body>
    <h3>@ViewBag.PageTitle</h3>

    <div>
        Name : @ViewBag.Employee.Name
    </div>
    <div>
        Email : @ViewBag.Employee.Email
    </div>
    <div>
        Department : @ViewBag.Employee.Department
    </div>
</body>
</html>

----------------------------------------------------------------------------------

3. ViewData v/s ViewBag

--> Both ViewData and ViewBag can be used to pass data from a Controller to a View
--> ViewBag is a wrapper around ViewData
--> Both of them create a loosely typed view
--> With ViewData we use string keys to store and retrieve data from the ViewData dictionary
--> With ViewBag we use dynamic properties to store and retrieve data
--> Both ViewData keys and ViewBag dynamic properties are resolved dynamically at runtime. 
--> Both ViewData and ViewBag does not provide compile-time type checking and as a result we do not get intellisense.
--> Since we do not have intellisense, the speed at which we write code is reduced and the chances of mis-spelling and making typographical errors are also high.
--> We will only come to know about these errors at run time. 
--> For this reason we usually do not use ViewData or ViewBag.
--> The preferred approach to pass data from a controller to a view is by using a strongly typed model object. 
--> Using a strongly typed model object creates a strongly typed view

----------------------------------------------------------------------------------
