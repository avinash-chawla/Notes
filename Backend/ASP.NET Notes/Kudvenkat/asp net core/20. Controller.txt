1. Suffix Controller

--> The controller class name is suffixed with word "Controller". 
--> For example HomeController, EmployeeController.

----------------------------------------------------------------------------

2. Handler

--> When a request from the browser arrives at our application, it is the controller in the MVC design pattern, that handles the incoming http request and responds to the user action. 
--> Controller class contains a set of public methods. These public methods in the Controller class are called action methods. It is these controller action methods that handle and process the incoming http request.

----------------------------------------------------------------------------

3. Action Method

--> http://localhost:12345/home/details
--> The URL "/home/details" is mapped to the "Details" public action method in the HomeController. This mapping is done by the routing rules defined in our application. 

----------------------------------------------------------------------------

4. Controller creates the Model

--> The request arrives at a controller action method. As part of processing that request, the controller creates the Model. 
--> To retrieve model data, the controller depends on a service. 

----------------------------------------------------------------------------

5. Controller returns JSON data

--> This is used in api
--> In HomeController,

public JsonResult Details()
{
        Employee model = _employeeRepository.GetEmployee(1);
        return Json(model);
}

--> Return type is JsonResult
--> In this case, Details() method always returns JSON data. 
--> It does not respect content negotiation and ignores the Accept Header.

----------------------------------------------------------------------------

6. Controller returns ObjectResult

--> It respects content negotiation. 
--> It looks at the Request Accept Header and if it is set to application/xml, then XML data is returned. 
--> If the Accept header is set to application/json, then JSON data is returned.

    public ObjectResult Details()
    {
        Employee model = _employeeRepository.GetEmployee(1);
        return new ObjectResult(model);
    }

----------------------------------------------------------------------------

--> NOTE:

--> To be able to return data in XML format, we have to add Xml Serializer Formatter by calling AddXmlSerializerFormatters() method in ConfigureServices() method in Startup.cs file.

public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc().AddXmlSerializerFormatters();
}

----------------------------------------------------------------------------

7. Controller returns View

--> We have set ViewResult as the return type for the Details method as we are returning a view. 

public ViewResult Details()
{
        Employee model = _employeeRepository.GetEmployee(1);
        return View(model);
}

----------------------------------------------------------------------------

8. Summary

1. When a request from the browser arrives at our application, it is the controller in the MVC design pattern, that handles the incoming http request and responds to the user action. 
2. The controller builds the model AND
3. Returns the Model data to the caller if we are building an API  OR
4. Select a View and pass the model data to the view
5. The View then generates the required HTML to present the data

----------------------------------------------------------------------------







