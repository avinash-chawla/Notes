1. Default Password Complexity Rules

--> By default, asp.net core identity does not allow creating simple passwords to protect our application from automated brute-force attacks. 
--> When we try to register a new user account with a simple password like abc, the account creation fails and you will see the following validation errors.

----------------------------------------------------------------------------------

2. PasswordOptions class

--> Password Default Settings are specified in the PasswordOptions class.
--> To see this class in .net core github, here is the link,

https://github.com/aspnet/AspNetCore

----------------------------------------------------------------------------------

public class PasswordOptions
{
    public int RequiredLength { get; set; } = 6;
    public int RequiredUniqueChars { get; set; } = 1;
    public bool RequireNonAlphanumeric { get; set; } = true;
    public bool RequireLowercase { get; set; } = true;
    public bool RequireUppercase { get; set; } = true;
    public bool RequireDigit { get; set; } = true;
}

----------------------------------------------------------------------------------

3. Override password default settings

--> We could do this by, using the Configure() method of the IServiceCollection interface in the ConfigureServices() method of the Startup class

services.Configure<IdentityOptions>(options =>
{
    options.Password.RequiredLength = 10;
    options.Password.RequiredUniqueChars = 3;
    options.Password.RequireNonAlphanumeric = false;
});

----------------------------------------------------------------------------------
OR
----------------------------------------------------------------------------------

--> We could also do this while adding Identity services 

services.AddIdentity<IdentityUser, IdentityRole>(options =>
{
    options.Password.RequiredLength = 10;
    options.Password.RequiredUniqueChars = 3;
    options.Password.RequireNonAlphanumeric = false;
})
.AddEntityFrameworkStores<AppDbContext>();

----------------------------------------------------------------------------------

4. IdentityOptions 

--> We are using the IdentityOptions object to configure PasswordOption

--> This class contains all the Options like PasswordOptions for changing default behavior.

UserOptions
SignInOptions
LockoutOptions
TokenOptions
StoreOptions
ClaimsIdentityOptions

----------------------------------------------------------------------------------






































