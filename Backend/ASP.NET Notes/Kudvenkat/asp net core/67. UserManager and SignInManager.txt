1. Identity UserManager and SignInManager

--> They are services provided by identityFramework
--> We will inject them in our AccoutController

--> UserManager<IdentityUser> class contains the required methods to manage users in the underlying data store. 
--> For example, this class has methods like CreateAsync, DeleteAsync, UpdateAsync to create, delete and update users.

--> SignInManager<IdentityUser> class contains the required methods for users signin. 
--> For example, this class has methods like SignInAsync, SignOutAsync to signin and signout a user.

-------------------------------------------------------------------------------

2. Built-in IdentityUser Class

public class IdentityUser<TKey> where TKey : IEquatable<TKey>
    {
        public IdentityUser();
        public IdentityUser(string userName);
	public virtual DateTimeOffset? LockoutEnd { get; set; }
        [PersonalData]
        public virtual bool TwoFactorEnabled { get; set; }
        [PersonalData]
        public virtual bool PhoneNumberConfirmed { get; set; }
        [ProtectedPersonalData]
        public virtual string PhoneNumber { get; set; }
        public virtual string ConcurrencyStamp { get; set; }
        public virtual string SecurityStamp { get; set; }
        public virtual string PasswordHash { get; set; }
        [PersonalData]
        public virtual bool EmailConfirmed { get; set; }
        public virtual string NormalizedEmail { get; set; }
        [ProtectedPersonalData]
        public virtual string Email { get; set; }
        public virtual string NormalizedUserName { get; set; }
        public virtual string UserName { get; set; }
        public virtual TKey Id { get; set; }
        public virtual bool LockoutEnabled { get; set; }
        public virtual int AccessFailedCount { get; set; }
	public override string ToString();
    }

-------------------------------------------------------------------------------

3. Account Controller

--> Both UserManager and SignInManager services are injected into the AccountController using constructor injection.
--> Both these services accept a generic parameter. 
--> We use the generic parameter to specify the User class that these services should work with. 

 
--> We are now using the built-in IdentityUser class as the argument for the generic parameter.
--> We can use our own class by inheriting IdentityUser class
--> We can also change inbuilt properties in Identity class and also add additional properties.


--> The generic parameter on these 2 services is an extension point. 
--> This means, we can create our own custom user with any additional data that we want to capture about the user and then plug-in this custom class as an argument for the generic parameter instead of the built-in IdentityUser class. 

-------------------------------------------------------------------------------

public class AccountController : Controller
    {
        private readonly UserManager<IdentityUser> userManager;
        private readonly SignInManager<IdentityUser> signInManager;

        public AccountController(UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager)
        {
            this.userManager = userManager;
            this.signInManager = signInManager;
        }

        [HttpGet]
        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Register(RegisterViewModel model)
        {
            if (ModelState.IsValid)
            {
                // Copy data from RegisterViewModel to IdentityUser
                var user = new IdentityUser
                {
                    UserName = model.Email,
                    Email = model.Email
                };

                // Store user data in AspNetUsers database table
                var result = await userManager.CreateAsync(user, model.Password);

                // If user is successfully created, sign-in the user using Successded property
                // SignInManager and redirect to index action of HomeController
                if (result.Succeeded)
                {
                    await signInManager.SignInAsync(user, isPersistent: false);			--> isPersistant: true (always logged in)
                    return RedirectToAction("index", "home");		--> isPersistant: false (cookie will be removed after closing browser)
                }

                // If there are any errors, add them to the ModelState object
                // which will be displayed by the validation summary tag helper
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            return View(model);
        }
    }

--> First we create new object of identityUser class
--> In CreateAsync method of UserManager object, we assign this object of identityUser class as user and second paramter as password that came from register form
--> As we are using async method, we have to make this actionMethod async
--> After Creating user, we get IdentityResult object which we name it : result
--> This result object has boolean property Succeeded
--> If user creation is succeeded, then user is sigin using signInManager service instance.
--> After signin, user is redirect to Index page of employee

--> If there are errors in generating new user, we will pass to ModelState object using AddModelError method.

--> SignInManager.SignInAsync()
--> UserManager.CreateAsync()

-------------------------------------------------------------------------------

--> Note:

--> Right now, we are using 2 properties to register user - email and password
--> And IdentityUser is the class provided by IdentityFramework
--> We can not edit this class but we can inherit it and do modify it and assign to userManager service instance.

-------------------------------------------------------------------------------

4. AspNetUsers table

--> Run the Application and submit the user register form
--> You can check user data in this AspNetUsers table

-------------------------------------------------------------------------------

