https://www.yogihosting.com/aspnet-core-custom-tag-helpers/#viewcontext

1. Custom Tag Helper

[HtmlTargetElement(Attributes = "background-color")]
    public class BackgroundColorTH : TagHelper
    {
        public string BackgroundColor { get; set; }
 
        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            output.Attributes.SetAttribute("class", $"btn btn-{BackgroundColor}");
        }
    }



--> The attribute – [HtmlTargetElement(Attributes = "background-color")] on the class tells that this Tag Helper applies to those html element that have the attribute background-color on them.

<button type="submit" background-color="danger">Add</button>

--> It has a string property called BackgroundColor. The ASP.NET Core inspects all the properties of the Custom Tag Helper and sets the values of all the properties whose name matches the attribute applied to the HTML element. 

------------------------------------------------------------------------------------------

2. TagHelperContext class

Tag Helpers receive information about the element they are transforming through TagHelperContext class object. It is provided as the first parameter of the Process() function.

The properties of the TagHelperContext class are given below:

Name	Description
AllAttributes	It contains a read-only dictionary of all the attributes applied to the element being transformed.
UniqueId	It contains a unique identifier of the element being transformed.
Items	It returns a dictionary that is used to coordinate between tag helpers,

------------------------------------------------------------------------------------------

3. TagHelperOutput class

The TagHelperOutput class is provided as the 2nd parameter of the Process() function. This class object contains the HTML element to be transformed and the transformation is done by configuring it’s object.

TagHelperOutput class properties are.

Name	Description
TagName	Get or Set the tag name for the output element.
Attributes	It returns a dictionary containing all the attributes of the output element.
Content	Used to set the contents of the output element.
PreElement	Used to insert Elements before the output element.
PostElement	Used to insert Elements after the output element.
PreContent	Used to insert contents into the output element before any existing content.
PostContent	Used to insert contents into the output element after any existing content.
TagHelperOutput class methods.

Name	Description
SupressOuput()	Used to exclude an element.

------------------------------------------------------------------------------------------

namespace TagHelpers.CustomTagHelpers
{
    [HtmlTargetElement("aspbutton")]
    public class AspButtonTH : TagHelper
    {
        public string Type { get; set; } = "Submit";
        public string BackgroundColor { get; set; } = "primary";
 
        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            output.TagName = "button";
            output.TagMode = TagMode.StartTagAndEndTag;
            output.Attributes.SetAttribute("class", $"btn btn-{BackgroundColor}");
            output.Attributes.SetAttribute("type", Type);
            output.Content.SetContent("Click to Add Record");
        }
    }
}

<button class="btn btn-danger" type="submit">Click to Add Record</button>


------------------------------------------------------------------------------------------

Appending and Prepending Elements with Tag Helper
The PreElement and PostElement properties of the TagHelperOutput class is used to add elements before and after the output element.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Razor.TagHelpers;
 
namespace TagHelpers.CustomTagHelpers
{
    [HtmlTargetElement("div", Attributes = "pre-post")]
    public class PrePostElementTH : TagHelper
    {
        public bool AddHeader { get; set; } = true;
        public bool AddFooter { get; set; } = true;
        public string PrePost { get; set; }
        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            output.Attributes.SetAttribute("class", "m-1 p-1");
            TagBuilder title = new TagBuilder("h1");
            title.InnerHtml.Append(PrePost);
 
            TagBuilder container = new TagBuilder("div");
            container.Attributes["class"] = "bg-info m-1 p-1";
            container.InnerHtml.AppendHtml(title);
 
            if (AddHeader)
                output.PreElement.SetHtmlContent(container);
            if (AddFooter)
                output.PostElement.SetHtmlContent(container);
        }
    }
}

------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------

















































