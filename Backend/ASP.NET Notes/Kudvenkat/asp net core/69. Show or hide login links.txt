1. Show or hide login and logout links based on login status

--> We will make use of SignInManager Class
--> It has methods to deal with IsSignedIn, Logout, UserName

---------------------------------------------------------------------------------

2. Show or hide navlinks in _Layout.cshtml

--> To inject class directly in view, we use @inject
--> This class is present in Microsoft.AspNetCore.Identity, so using statement
--> We can shift this using in _ViewImports file.

---------------------------------------------------------------------------------

--> SignInManager.IsSignedIn(User)  checks for Is User Signed In.
--> If Yes, we want to show logout button, which on click redirect to home/index page of application

--> If IsSignedIn to false, then we want to show login and register button, which on click redirect to login page (in account controller, login actionMethod) or register page.

---------------------------------------------------------------------------------

--> We have use a POST request to log the user out. Using a GET request to log out the user is not recommended because the approach may be abused. 
--> A malicious user may trick you into clicking an image element where the src attribute is set to the application logout url. 
--> As a result you are unknowingly logged out.

---------------------------------------------------------------------------------

@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager

 <div class="collapse navbar-collapse justify-content-end" id="collapsibleNavbar">
        <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Employee" asp-action="Index">Employees</a>
                        </li>
        </ul> 

        <ul class="navbar-nav ml-auto">
        @*If the user is signed-in display Logout link*@
        @if (SignInManager.IsSignedIn(User))
        {
            <li class="nav-item">
                <form method="post" asp-controller="account" asp-action="logout">
                    <button type="submit" style="width:auto"
                            class="nav-link btn btn-link py-0">
                        Logout @User.Identity.Name
                    </button>
                </form>
            </li>
        }
        else
        {
            <li class="nav-item">
                <a class="nav-link" asp-controller="account" asp-action="register">
                    Register
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" asp-controller="account" asp-action="login">
                    Login
                </a>
            </li>
        }
    </ul>
</div>

---------------------------------------------------------------------------------

3. Implementing Logout actionMethod in AccountController

[HttpPost]
        public async Task<IActionResult> Logout()
        {
            await signInManager.SignOutAsync();
            return RedirectToAction("index", "home");
        }

--> There is a async method in signInManager SignOutAsync();
--> After loging out, user is navigated to index actionMethod of employee

---------------------------------------------------------------------------------

4. Note

--> In _Layout.cshtml, SignInManager.IsSignedIn(User) was not working
--> Solution:
--> I forget to write app.UseAuthentication() middleware just before mvc middleware in startup file.

---------------------------------------------------------------------------------




















