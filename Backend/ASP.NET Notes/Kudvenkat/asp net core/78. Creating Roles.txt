1. RoleManager in ASP.NET Core

--> To create a user in asp.net core we use UserManager class. 
--> Similarly, to create a role, we use RoleManager class provided by asp.net core

--> As we have built-in IdentityUser class to store user data,
--> We have built-in IdentityRole class represents a Role

--> RoleManager class performs all the CRUD operations i.e Creating, Reading, Updating and Deleting roles from the underlying database table AspNetRoles
--> To tell the RoleManager class to work with IdentityRole class, we specify IdentityRole class as the generic argument to RoleManager 
RoleManager is made available to any controller or view by asp.net core dependency injection system

------------------------------------------------------------------------------

RoleManager<IdentityRole>
UserManager<IdentityUser>

------------------------------------------------------------------------------

2. AdministrationController

--> Create new controller for doing crud operations on different Roles.
--> Name it : AdministrationController.cs

public class AdministrationController : Controller
{
    private readonly RoleManager<IdentityRole> roleManager;

    public AdministrationController(RoleManager<IdentityRole> roleManager)
    {
        this.roleManager = roleManager;
    }
}

--> We inject the service of RoleManager class in construction of controller
--> It has methods for doing crudOperations on domain class --> IdentityRole

------------------------------------------------------------------------------

3. MVC for Creating Role

--> First building Model
--> We will create CreateRoleViewModel.cs class

using System.ComponentModel.DataAnnotations;

namespace EmployeeManagement.ViewModels
{
    public class CreateRoleViewModel
    {
        [Required]
        [Display(Name = "Role")]
        public string RoleName { get; set; }
    }
}

------------------------------------------------------------------------------

4. Controller

using EmployeeManagement.ViewModels;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace EmployeeManagement.Controllers
{
    public class AdministrationController : Controller
    {
        private readonly RoleManager<IdentityRole> roleManager;

        public AdministrationController(RoleManager<IdentityRole> roleManager)
        {
            this.roleManager = roleManager;
        }

        [HttpGet]
        public IActionResult CreateRole()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> CreateRole(CreateRoleViewModel model)
        {
            if (ModelState.IsValid)
            {
                // We just need to specify a unique role name to create a new role
                IdentityRole identityRole = new IdentityRole
                {
                    Name = model.RoleName
                };

                // Saves the role in the underlying AspNetRoles table
                IdentityResult result = await roleManager.CreateAsync(identityRole);

                if (result.Succeeded)
                {
                    return RedirectToAction("index", "home");
                }

                foreach (IdentityError error in result.Errors)
                {
                    ModelState.AddModelError("", error.Description);
                }
            }

            return View(model);
        }
    }
}

------------------------------------------------------------------------------

5. Create Role View

@model CreateRoleViewModel

@{
    ViewBag.Title = "Create New Role";
}

<form asp-action="CreateRole" method="post" class="mt-3">
    <div asp-validation-summary="All" class="text-danger">
    </div>
    <div class="form-group row">
        <label asp-for="RoleName" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <input asp-for="RoleName" class="form-control" placeholder="Name">
            <span asp-validation-for="RoleName" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary" style="width:auto">
                Create Role
            </button>
        </div>
    </div>
</form>

------------------------------------------------------------------------------

6. Create new role

--> Go to: http://localhost:1234/administration/createRole
--> Admin
--> Submit the form
--> Check in AspNetRole table

------------------------------------------------------------------------------


























