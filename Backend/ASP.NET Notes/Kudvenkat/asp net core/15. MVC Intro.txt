1. MVC

--> MVC consists of three fundamental parts - Model, View and Controller. 
--> It's an architectural design pattern for implementing User Interface Layer of an application. 

--> A typical real world application usually has the following layers.
1. User Interface Layer
2. Business Logic Layer or Domain Layer
3. Data Access layer

--------------------------------------------------------------------------------

2. Components of MVC

--> Controller
1. It receives the controller and handles it
2. It talks with model to retrieve the data and pass it to view.

--> Model
1. It describes the data
2. It also contains logic to retrieve data from database

--> View 
1. It is responsible for presenting the model data

--------------------------------------------------------------------------------

3. Working Process of MVC

1. When this request arrives at our server, it is the Controller in the MVC design pattern that receives the request and handles it. 
2. The controller creates the model. The model has the classes that describe the data. 
3. In addition to the data itself, Model also contains the logic to retrieve data from the underlying data source such as a database. 
4. In addition to creating the Model, the controller also selects a View and passes the Model object to that View. 
5. The view is only responsible for presenting the model data. 
6. It is the view, that generates the required HTML to present the model data i.e the employee data provided to it by the Controller. 
7. This HTML is then sent over the network to the user who made the request.

--------------------------------------------------------------------------------

4. Model

--> A Model in MVC contains a set of classes that represent data and the logic to manage that data

--> The class that represent the data is the Employee class and the class that manages the data is the EmployeeRepository class.
--> Interface abstraction allows us to use dependency injection which in turn allows us to create systems that are loosely coupled  and easily testable.

--------------------------------------------------------------------------------

public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Department { get; set; }
}

public interface IEmployeeRepository
{
    Employee GetEmployee(int id);
    void Save(Employee employee);
}

public class EmployeeRepository : IEmployeeRepository
{
    public Employee GetEmployee(int id)
    {
        // Logic to retrieve employee details
    }

    public void Save(Employee employee)
    {
        // Logic to save employee details
    }
}

--------------------------------------------------------------------------------

5. View

--> A View in MVC should only contain the logic to display the Model data provided to it by the Controller.
--> In MVC, a View in only responsible for presenting the model data. There should be no complex logic in a view

--------------------------------------------------------------------------------
@model EmployeeManagement.Employee

<html>
<head>
    <title>Employee Details</title>
</head>
<body>
    <table>
        <tr>
            <td>ID</td>
            <td>@Model.Id</td>
        </tr>
        <tr>
            <td>Name</td>
            <td>@Model.Name</td>
        </tr>
        <tr>
            <td>Department</td>
            <td>@Model.Department </td>
        </tr>
    </table>
</body>
</html>

--------------------------------------------------------------------------------

6. Controller

--> When a request from the browser arrives at our application, it is the controller in the MVC design pattern, that handles the incoming http request and responds to the user action.

--> The user has issued a request to the URL (/employee/details/1)
--> It is in this syntax: /controllerName/actionMethod/parameter to this actionMethod 
--> This mapping is done by the Routing rules defined in our application

--------------------------------------------------------------------------------


public class EmployeeController : Controller
{
    private IEmployeeRepository _employeeRepository;

    public EmployeeController(IEmployeeRepository employeeRepository)
    {
        _employeeRepository = employeeRepository;
    }

    public IActionResult Details(int id)
    {
        Employee model = _employeeRepository.GetEmployee(id);
        return View(model);
    }
}

--------------------------------------------------------------------------------

--> As you can see, from the code in the Details action method, the controller builds the model, in this case the Model is the Employee object. 
--> To retrieve the Employee data from the underlying data source, the controller is making use of the EmployeeRepository class. 

--------------------------------------------------------------------------------

7. Summary

1. MVC is an architectural design pattern for implementing User Interface Layer of an application

2. Model : Set of classes that represent data + the logic to manage that data. Example - Emplopyee class that represents the Employee data + 
3. EmployeeRepository class that saves and retrieves employee data from the underlying data source such as a Database.

4. View : Contains the display logic to present the Model data provided to it by the Controller
Controller : Handles the http request, work with the model, and selects a view to render that model.

5. As you can see, in the MVC design pattern we have a clear separation of concerns.

--------------------------------------------------------------------------------



















