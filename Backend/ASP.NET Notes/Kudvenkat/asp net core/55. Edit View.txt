--> Edit View

1. Steps need to follow

--> There will be edit button on index and details view
--> When clicking this button, user is redirected to Edit View form
--> Edit View form is populated with data provided from Id.
--> Total 3 steps to create edit view
1. Create Edit View Model
2. Implement Edit Actions that responds to HttpGet request
3. Implement Edit View

----------------------------------------------------------------------------------

2. Index.cshtml

--> Edit button should redirect user to edit url in index.cshtml

<a asp-controller="home" asp-action="edit" asp-route-id="@employee.Id"
    class="btn btn-primary m-1">Edit</a>

----------------------------------------------------------------------------------

3. Edit View Model

--> Create new class in ViewModels folder -> EmployeeCreateViewModel
--> This will contain properties like Name, Email, Department, ExistingPhotoPath
--> As form model is somewhat same as create form viewModel , we will derive this class.


public class EmployeeEditViewModel : EmployeeCreateViewModel
{
    public int Id { get; set; }
    public string ExistingPhotoPath { get; set; }
}

----------------------------------------------------------------------------------

4. Edit Action Method

--> We will get Id of Employee
--> After getting Id, we will fill the form with Employee details using Id.
--> And pass that filled with data model to view.

[HttpGet]
public ViewResult Edit(int id)
{
    Employee employee = _employeeRepository.GetEmployee(id);
    EmployeeEditViewModel employeeEditViewModel = new EmployeeEditViewModel
    {
        Id = employee.Id,
        Name = employee.Name,
        Email = employee.Email,
        Department = employee.Department,
        ExistingPhotoPath = employee.PhotoPath
    };
    return View(employeeEditViewModel);
}

----------------------------------------------------------------------------------

5. Edit View

--> Create new View in home folder inside Views
--> It is much similar to Create form
--> We have used hidden field for Id and ExistingPhotoPath.
--> action of this form is edit
--> We are displaying image of user, using PhotoPath 
--> We have created two buttons --> Update and Cancel
--> Cancel will redirect user to index.cshtml.


@model EmployeeEditViewModel

@{
    ViewBag.Title = "Edit Employee";
    // Get the full path of the existing employee photo for display
    var photoPath = "~/images/" + (Model.ExistingPhotoPath ?? "noimage.jpg");
}

<form asp-controller="home" asp-action="edit" enctype="multipart/form-data" method="post" class="mt-3">
    <div asp-validation-summary="All" class="text-danger">
    </div>
    @*Use hidden input elements to store employee id and ExistingPhotoPath
        which we need when we submit the form and update data in the database*@
    <input hidden asp-for="Id" />
    <input hidden asp-for="ExistingPhotoPath" />

    @*Bind to the properties of the EmployeeEditViewModel. The asp-for tag helper
        takes care of displaying the existing data in the respective input elements*@
    <div class="form-group row">
        <label asp-for="Name" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <input asp-for="Name" class="form-control" placeholder="Name">
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row">
        <label asp-for="Email" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <input asp-for="Email" class="form-control" placeholder="Email">
            <span asp-validation-for="Email" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group row">
        <label asp-for="Department" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <select asp-for="Department" class="custom-select mr-sm-2"
                    asp-items="Html.GetEnumSelectList<Dept>()">
                <option value="">Please Select</option>
            </select>
            <span asp-validation-for="Department" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group row">
        <label asp-for="Photo" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <div class="custom-file">
                <input asp-for="Photo" class="custom-file-input form-control">
                <label class="custom-file-label">Click here to change photo</label>
            </div>
        </div>
    </div>

    @*Display the existing employee photo*@
    <div class="form-group row col-sm-4 offset-4">
        <img class="imageThumbnail" src="@photoPath" asp-append-version="true" />
    </div>

    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Update</button>
            <a asp-action="index" asp-controller="home" class="btn btn-primary">Cancel</a>
        </div>
    </div>

    @section Scripts {
        <script>
            $(document).ready(function () {
                $('.custom-file-input').on("change", function () {
                    var fileName = $(this).val().split("\\").pop();
                    $(this).next('.custom-file-label').html(fileName);
                });
            });
        </script>
    }
</form>

----------------------------------------------------------------------------------

6. Note

--> You can not use tag-helper asp-action or asp-controller if href is present in a tag: <a href="#"> 

----------------------------------------------------------------------------------

7. If CSS style not working from site.css in wwwroot

--> check for middleware --> app.UseStaticFiles()
--> Check for css link in _Layout partial view.

----------------------------------------------------------------------------------













































