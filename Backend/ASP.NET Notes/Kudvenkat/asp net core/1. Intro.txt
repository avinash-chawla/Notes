1. What is ASP.NET Core 

--> ASP.NET Core is a cross-platform, high-performance, open-source framework for building modern, cloud-based, Internet-connected applications.

--> ASP.NET Core is a redesign of ASP.NET 4.x. For this reason it was initially, called ASP.NET 5, but later renamed to ASP.NET Core 1.0.

---------------------------------------------------------------------------'

2. Benefits
1. Cross Platform 
2. Unified Programming Model for MVC and Web API : 
3. Dependency Injection 
4. Testability
5. Open-source and community-focused
6. Modular HTTP Request Pipeline : ASP.NET Core Provides Modularity with Middleware Components. 

---------------------------------------------------------------------------'

1. Cross Platform 

--> ASP.NET 4.x applications run only on windows platform, where as ASP.NET Core applications can be developed and run across different platforms like Windows, macOS, or Linux. 

--> ASP.NET 4.x applications can be hosted only on IIS, where as ASP.NET Core applications can be hosted on IIS, Apache, Docker, or even self-host in your own process.

---------------------------------------------------------------------------'

2. Unified Programming Model for MVC and Web API : 

--> With ASP.NET core, we use the same unified programming model to create MVC style web applications and ASP.NET Web API's. 

--> In both the cases, the Controller that we create inherits from the same Controller base class and returns IActionResult. 

--> As the name implies IActionResult is an interface and it has got several implementations. ViewResult and JsonResult are just 2 examples of the built-in result types that implement IActionResult interface.

---------------------------------------------------------------------------'

3. Machine Setup

--> Two things are required:
1. Code editor
2. .net core sdk

--> .net core sdk also installed with Visual Studio

---------------------------------------------------------------------------'

4. Create New Project

--> Click on New Project
--> Select ASP NET core web application
--> For template: select empty

---------------------------------------------------------------------------'

5. Project file

--> Right click Project Name
--> Select Edit Project File

<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
  </PropertyGroup>
</Project>


--> TargetFramework 

--> It is used to specify the target framework for your application
--> To specify a target framework we use something called Target Framework Moniker (TFM). 
--> As you can see in the above example, our application targets one framework netcoreapp2.2. netcoreapp2.2 is the Moniker for .NET Core 2.2

---------------------------------------------------------------------------'

6. Main method in program.cs

--> Why do we have a Main() method.

--> Well, the important point to keep in mind is that, an asp.net core application initially starts as a console application and the Main() method in Program.cs file is the entry point. 

---------------------------------------------------------------------------'

7. Other methods inside main method

public class Program
{
    public static void Main(string[] args)
    {
        CreateWebHostBuilder(args).Build().Run();
    }

    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        WebHost.CreateDefaultBuilder(args)
            .UseStartup<Startup>();
}

--> As you can see, CreateWebHostBuilder() method returns an object that implements IWebHostBuilder.
--> On this object, Build() method is called which builds a web host that hosts our asp.net core web application.
--> On the web host Run() method is called, which runs the web application and it begins listening for incoming HTTP requests.

--> CreateWebHostBuilder() method calls CreateDefaultBuilder() static method of the WebHost class.

--> Startup class is also configured using the UseStartup() extension method of IWebHostBuilder class. If you are new to the concept of extension methods, please check out the following video.
https://www.youtube.com/watch?v=VkrKNXscoto

---------------------------------------------------------------------------'

8. Startup.cs

ConfigureServices() method configures services required by the application
Configure() method sets up the application's request processing pipeline

---------------------------------------------------------------------------'

9. InProcess Hosting

1. First main method is called.
2. Then it calls, CreateWebHostBuilder
3. Then it calls, WebHost.CreateDefaultBuilder(args)

--> This CreateDefaultBuilder() method performs several tasks like 
1. Setting up the web server 
2. Loading the host and application configuration from various configuration sources and 
3. Configuring logging

---------------------------------------------------------------------------'

--> An ASP.NET core application can be hosted InProcess or OutOfProcess.
--> In case of InProcess hosting, CreateDefaultBuilder() method calls UseIIS() method and host the app inside of the IIS worker process (w3wp.exe or iisexpress.exe). 

---------------------------------------------------------------------------'

1. From a performance standpoint, InProcess hosting delivers significantly higher request throughput than OutOfProcess hosting
2. In the case of IIS, the process name that executes the app is w3wp and in the case of IIS Express it is iisexpress
3. To get the process name executing the app, use System.Diagnostics.Process.GetCurrentProcess().ProcessName
4. When we are run the project from Visual Studio it uses IISExpress by default. 
5. IIS Express is a lightweight, self-contained version of IIS, optimized for application development. We do not use it for production. In production we use IIS.


---------------------------------------------------------------------------'

--> With out-of-process hosting

--> There are 2 web servers - An internal web server and an external web server.
--> The internal web server is Kestrel and the external web server can be IIS, Nginx or Apache.
--> With InProcess hosting, there is only one web server i.e the IIS that hosts the asp.net core application. 
--> So, we do not have the performance penalty of proxying requests between internal and external web server.

--> With in-process hosting

--> There is only 1 web server: IISExpress or IIS
---------------------------------------------------------------------------'

10. Kestral Server

--> Kestrel is a cross-platform web server for ASP.NET Core. 

--> It is supported on all platforms and versions that .NET Core supports. 
--> It is included by default as internal server in process-out hosting in net core. 
--> Kestrel can be used, by itself as an edge server i.e Internet-facing web server that can directly process the incoming HTTP requests from the client. 
--> In Kestrel, the process used to host the app is dotnet.exe.
--> While, in IISexpress, the process used is iisexpress.exe
--> And in case of IIS, the process used is w3wp.exe

---------------------------------------------------------------------------'

11. .net core cli

--> Open command line
--> dotnet --help
--> dotnet run			(first visit project folder)
--> When we run a .NET Core application using the .NET Core CLI (Command-Line Interface), the application uses Kestrel as the web server.
--> default port number: 5000
--> process shown is dotnet			(System.Diagnostics.Process.GetCurrentProcess().ProcessName)

---------------------------------------------------------------------------'

12. Out-of-Process Hosting

--> There are 2 ways to configure Out of Process hosting

Option 1 : Add <AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>
Option 2 : remove above line. OutOfProcess hosting will be used by default.

---------------------------------------------------------------------------'

--> With out-of-process hosting

--> There are 2 web servers - An an internal web server and an external web server.
--> The internal web server is Kestrel and the external web server can be IIS, Nginx or Apache.

---------------------------------------------------------------------------'

--> Kestrel can be used as the internet facing web server that process the incoming HTTP requests directly. 
--> In this model we are not using an external web server. 
--> Only Kestrel is used and it is this server that faces the internet, to directly handle the incoming HTTP requests. 
--> When we run the asp.net core application using the .NET core CLI, Kestrel is the only web server that is used to handle and process the incoming HTTP request.

---------------------------------------------------------------------------'

--> Kestrel can also be used in combination with a reverse proxy server, such as IIS, Nginx, or Apache.

--> If Kestrel can be used by itself as a web server, why do we need a reverse proxy server.
--> With Out of Process Hosting, using a reverse proxy server is a good choice as it provides an additional layer of configuration and security. It might integrate better with the existing infrastructure. It can also be used for load balancing.

--> So, with a reverse proxy server in place, it receives incoming HTTP requests from the network and forwards them to the Kestrel server for processing. 
--> Upon processing the request, the Kestrel server sends the response to the reverse proxy server which then ultimately sends the response to the requested client over the network

--> Since we have configured our application to use Out of Process hosting, IIS Express in this case acts a reverse proxy server.

---------------------------------------------------------------------------'

--> NET Core CLI
--> Irrespective of the value you specified (InProcess or OutOfProcess), it always uses OutOfProcess hosting and Kestrel is the web server that hosts the application and handle the http requests. 

---------------------------------------------------------------------------'

--> One common question : Can we run an asp.net core application without using the built in kestrel web server.
--> The answer is YES. If we use the InProcess hosting model, the application is hosted inside of the IIS worker process (w3wp.exe or iisexpress.exe). Kestrel is not used with InProcess hosting model.

---------------------------------------------------------------------------'

13. Difference between InProcess and Out-of-Process 

1 Process Name: 
--> for kestral: dotnet.exe
--> for IIS    : w3wp.exe or iisexpress.exe

2. Server Number:
--> In Process: Only one 
--> Out-of-process: Two

3. Performance
--> InProcess has higher performance than OutofProcess

---------------------------------------------------------------------------'

14. launchsettings.json

--> This file is in the "Properties" folder in the project root folder. 
--> This file is only used on local development machine
--> To publish and deploy your app, store settings in appsettings.json file.

---------------------------------------------------------------------------

--> Notice, we have 2 launch profiles - IIS Express and EmployeeManagement(projectName)

--> By pressing CTRL+F5 or just F5, by default, the profile with "commandName": "IISExpress" is used. 
--> On the other hand, if we run the project using .NET Core CLI (dotnet run), the profile with the  "commandName": "Project" is used. 

---------------------------------------------------------------------------

--> The value of the commandName property can be any one of the following. 
Project
IISExpress
IIS
--> This value along with the value of AspNetCoreHostingModel element in the project file, specifies the internal and external web server (reverse proxy server) to launch
--> Launch Profile can be selected from dropdown in task bar.

---------------------------------------------------------------------------

commandName	AspNetCoreHostingModel		Internal Web Server			External Web Server

Project		Hosting Setting Ignored		Only one web server is used - 		Kestrel
IISExpress	InProcess			Only one web server is used - 		IIS Express
IISExpress	OutOfProcess			Kestrel					IIS Express
IIS		InProcess			Only one web server is used - IIS
IIS		OutOfProcess			Kestrel					IIS


--> To access GUI
--> Click on the "Debug" tab on the project "Properties" window

---------------------------------------------------------------------------

15. appsettings.json

--> All settings related to project saved here.
--> eg. "secret_key" : "myPassword"

--> Accessing configuration information 
--> We use Dependency Injection in constructor to access this configuration information.

---------------------------------------------------------------------------

--> In startup.cs

public class Startup
{
    private IConfiguration _config;

    // Notice we are using Dependency Injection here
    public Startup(IConfiguration config)			--> code snippet for generating constructor --> ctor
    {
        _config = config;
    }

--> await context.Response.WriteAsync(_config["secret_key"]);

--> Use (ctrl+.)  to import necessary classes.

---------------------------------------------------------------------------'

16. Dependency Injection

--> In previous versions of ASP.NET Dependency Injection was optional and to configure it we have to use frameworks like Ninject, StructureMap etc. --> In ASP.NET Core Dependency Injection is an integral part. Dependency Injection allow us to create systems that are loosely coupled, extensible and easily testable

---------------------------------------------------------------------------'

17. ASP.NET Core IConfiguration service

--> IConfiguration service is setup to read configuration information from all the various configuration sources in asp.net core
--> If you have a configuration setting with the same key in multiple configuration sources, the later configuration sources override the earlier configuration sources 
--> CreateDefaultBuilder() method of the WebHost class which is automatically invoked when the application starts, reads the configuration sources in a specific order. https://github.com/aspnet/MetaPackages/blob/release/2.2/src/Microsoft.AspNetCore/WebHost.cs
--> .Net core is open source project, so you can see every class and every method code.

---------------------------------------------------------------------------'

--> Upon inspecting the file, you will see, the following is the default order in which the various configuration sources are read
1. appsettings.json, 			(least priority)
2. appsettings.{Environment}.json
3. User secrets
4. Environment variables
5. Command-line arguments

4. Environment variable
--> In lauchSettings.json --> add environment variable: 
"environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
          "MyKey": "Value from launchSettings"
      }

5. Command Line arguments
--> dotnet run MyKey="Value from command Line"

---------------------------------------------------------------------------'

18. What is Middleware in ASP.NET Core

--> In ASP.NET Core, Middleware is a piece of software that can handle an HTTP request or response. 
--> A given middleware component in ASP.NET Core has a very specific purpose. 
--> For example we may have a middleware component that authenticates a user, another piece of middleware to handle errors, yet another middleware to serve static files such as JavaScript files, CSS files, Images etc.


--> In ASP.NET Core, a Middleware component has access to both - the incoming request and the outgoing response.
--> A middleware component may handle the request and decide not to call the next middleware in the pipeline. 
--> This is called short-circuiting the request pipeline. 
--> Short-circuiting is often desirable because it avoids unnecessary work. 

--> For example, if the request is for a static file like an image or css file, the StaticFiles middleware can handle and serve that request and short-circuit the rest of the pipeline. 
--> This means in our case, the StaticFiles middleware will not call the MVC middleware if the request is for a static file.


--> A middleware component may also process the outgoing response. 
--> Middleware components are executed in the order they are added to the pipeline.
--> The middleware components are available as NuGet packages

---------------------------------------------------------------------------'

19. Request Processing Pipeline

--> It is these middleware components that we use to setup a request processing pipeline in ASP.NET Core. 
--> It is this pipeline that determines how a request is processed. 
--> The request pipeline is configured as part of the application startup by the Configure() method in Startup.cs file.  The following is the code in Configure() method.

public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }

    app.Run(async (context) =>
    {
        await context.Response.WriteAsync("Hello World!");
    });
}

Above two middleware functions are used. (app.Run and app.Use)

---------------------------------------------------------------------------'

20. Configure Request Processing Pipeline

--> As part of the application startup, Configure() method sets up the request processing pipeline
--> At the moment we have 2 middlewares in the pipeline:
1. UseDeveloperExceptionPage() and
2. another middleware that is registered using the Run() method

1. UseDeveloperExceptionPage Middleware 

--> This middleware responds with the developer exception page, if there is an exception and if the environment is Development.

2. Run() method

--> We are using Run() method to add middleware to our application's request processing pipeline
--> The parameter that we are passing to the Run() method is a RequestDelegate
--> RequestDelegate is a delegate that has HttpContext object as a parameter. 
--> It is through this HttpContext object, the middleware gains access to both the incoming http request and outgoing http response.

--> At the moment, we are passing request delegate inline as an anonymous method using a lambda.
---------------------------------------------------------------------------'

21. Terminal Middleware

--> With this Run() extension method we can only add a terminal middleware to the request pipeline.
--> A terminal middleware is a middleware that does not call the next middleware in the pipeline

app.Use(async (context, next) =>
{
    await context.Response.WriteAsync("Hello from 1st Middleware");
    await next();
});

app.Run(async (context) =>
{
    await context.Response.WriteAsync("Hello from 2nd Middleware");
});

--> Notice, Use() method has 2 parameters. 
--> The first parameter is the HttpContext context object and the second parameter is the Func type i.e it is a generic delegate that represents the next middleware in the pipeline.

---------------------------------------------------------------------------

22. Pipeline starts to reverse

public void Configure(IApplicationBuilder app, IHostingEnvironment env,
                ILogger<Startup> logger)
{
    app.Use(async (context, next) =>
    {
        logger.LogInformation("MW1: Incoming Request");
        await next();
        logger.LogInformation("MW1: Outgoing Response");
    });

    app.Use(async (context, next) =>
    {
        logger.LogInformation("MW2: Incoming Request");
        await next();
        logger.LogInformation("MW2: Outgoing Response");
    });

    app.Run(async (context) =>
    {
        await context.Response.WriteAsync("MW3: Request handled and response produced");
        logger.LogInformation("MW3: Request handled and response produced");
    });
}


---------------------------------------------------------------------------

--> ILogger<Startup> is injected into the Configure() method
--> We are using the logger instance provided by the Dependency Injection system to log the information in console.

--> You will see that, the information is logged in the following order
MW1: Incoming Request
MW2: Incoming Request
MW3: Request handled and response produced
MW2: Outgoing Response
MW1: Outgoing Response

---------------------------------------------------------------------------

--> So here are the 3 very important points to keep in mind regarding the request processing pipeline

1. Everything that happens before the next() method is invoked in each of the middleware components, happen as the request travels from middleware to middleware through the pipeline and this is represented by the incoming arrow.

2. When a middleware handles the request and produces response, the request processing pipeline starts to reverse.

3. Everything that happens after the next() method is invoked in a middleware component, happens as the response travels from middleware to middleware through the pipeline and this is represented by the outgoing arrow.

---------------------------------------------------------------------------'
