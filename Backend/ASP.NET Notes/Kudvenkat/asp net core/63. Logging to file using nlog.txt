1. NLog

--> Install this dependency from nuget package manager
--> NLog.Web.AspNetCore
--> This is 3rd party package for logging to file
--> You can see reference of this in proj file.

--> To learn more about this dependency, refer this link,
https://github.com/NLog/NLog/wiki/Configuration-file

----------------------------------------------------------------------------------

2. nglog.config

--> This dependency needs config file in root project folder
--> It will read instructions from this file.

--> Make new file in project file --> nlog.config

<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <!-- the targets to write to -->
  <targets>
    <!-- write logs to file  -->
    <target name="allfile" xsi:type="File"
            fileName="c:\DemoLogs\nlog-all-${shortdate}.log"/>			--> This is destination
  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <!--All logs, including from Microsoft-->
    <logger name="*" minlevel="Trace" writeTo="allfile" />
  </rules>
</nlog>

----------------------------------------------------------------------------------

3. Enable copy to bin folder

--> Right click on nlog.config file in the Solution Explorer and select Properties. 
--> In the Properties window set 

Copy to Output Directory = Copy if newer

----------------------------------------------------------------------------------

4. Enable NLog as one of the Logging Provider

--> In addition to using the default logging providers (i.e Console, Debug & EventSource), we also added NLog using the extension method AddNLog(). 
--> This method is in NLog.Extensions.Logging namespace.

--> In Program.cs,

public class Program
{
    public static void Main(string[] args)
    {
        CreateWebHostBuilder(args).Build().Run();
    }

    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        WebHost.CreateDefaultBuilder(args)
        .ConfigureLogging((hostingContext, logging) =>
        {
            logging.AddConfiguration(hostingContext.Configuration.GetSection("Logging"));
            logging.AddConsole();
            logging.AddDebug();
            logging.AddEventSourceLogger();

            // Enable NLog as one of the Logging Provider
            logging.AddNLog();
        })
        .UseStartup<Startup>();
}

--> Above code is copied from .net core github
--> Added new logger NLog in this method.

----------------------------------------------------------------------------------

5. If you want only NLog as the logging provider, clear all the logging providers and then add NLog.

public class Program
{
    public static void Main(string[] args)
    {
        CreateWebHostBuilder(args).Build().Run();
    }

    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        WebHost.CreateDefaultBuilder(args)
        .ConfigureLogging((hostingContext, logging) =>
        {
            // Remove all the default logging providers
            logging.ClearProviders();
            logging.AddConfiguration(hostingContext.Configuration.GetSection("Logging"));
            // Add NLog as the Logging Provider
            logging.AddNLog();
        })
       .UseStartup<Startup>();
}

----------------------------------------------------------------------------------
