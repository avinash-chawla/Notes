1. Action Result

--> Type				Method

--> ViewResult				View()
--> PartialViewResult			PartialView()
--> ContentResult			Content()
--> RedirectResult			Redirect()
--> RedirectToRouteResult		RedirectToAction()
--> JsonResult				Json()
--> FileResult				File()
--> HttpNotFoundResult			HttpNotFound()
--> EmptyResult				new EmptyResult();


--> All methods above are helper methods inherited from base Controller class.
--> You do not to create view object to pass model to view
--> You can also do this,

return new ViewResult(modelName);

--> ActionResult is the base class for all above mentioned types.

--> eg.

View(movie);
Content("Hello World");
HttpNotFound();
new EmptyResult();
RedirectToActino("Index", "Home", new { page=1, sortBy = "name" });

--------------------------------------------------------------------------------

2. Action Parameters

--> Earlier, we have seen actionResults
--> Additional Parameters pass to action Method using Property Binding concept in mvc
--> Parameters can be pass through form, url parameter, query String

--> Based on conventional routing, you can only use 'id' in additional paramter
--> While there is no limit to query string and form 

--> You can change this behaviour by using Attribute routing

        public ActionResult Edit(int id)
        {
            return Content("id " + id);
        }

        public ActionResult Index(int? pageIndex, string sortBy)
        {
            if (!pageIndex.HasValue)
                pageIndex = 1;
            if (sortBy.IsNullOrWhiteSpace())
                sortBy = "Asc";
            return Content(String.Format("pageIndex={0}&sortBy={1}", pageIndex, sortBy));
        }



--> We have made int type nullable to accept null from url
--> IN url: 
localhost:1234/movies?pageIndex=1&sortBy=desc
localhost:1234/movies/1  or
localhost:1234/movies?id=1

--> You can see conventional routing in route.config file in App_Start folder.

--------------------------------------------------------------------------------

3. Attribute Routing

--> It is used when you have additional parameter other than id.
--> To use Attribute routing, first you need to enable it
--> In route.config file

routes.MapMvcAttributeRoutes(); 

--> Add this method before MapRoute() method

--> Implementing Route Attribute

--> [Route("movies/released/{year}")]

--> Place this attribute above actionMethod, as given below


        [Route("movies/released/{year}/{month}")]
        public ActionResult ByReleaseyear(int year ,int month)
        {
            return Content(String.Format("{0} - {1}", year, month));
        }

--> Attribute routing with Constraints

[Route("movies/released/{year}/{month:regex(\d{4}):range(1,12)}")]

--> other constraints are min, max, minlength, maxlenght, int, float
--> Search in google attribute routing contraints

--------------------------------------------------------------------------------

4. Passing Data to Views

--> There are three ways
1. ViewData
2. ViewBag
3. directly in parameter of View

--------------------------------------------------------------------------------

5. View Models

--> They are DTOs
--> Combining multiple classes Property in one class and then that passed in view to show multiple properties

--> Making Models class first
1. Movie.cs

    public class Movie
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

2. Customer.cs

    public class Customer
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

-----------------------------------------------------------------------------

--> Make new folder in project --> ViewModels
--> Make new file --> RandomMovieViewModel.cs

    public class RandomMovieViewModel
    {
        public Movie Movie { get; set; }
        public List<Customer> Customers { get; set; }
    }

-----------------------------------------------------------------------------

--> In controller action method, pass this object of ViewModel

        public ActionResult Index()
        {
            Movie movie = new Movie() { Id = 1, Name = "Inception" };

            List<Customer> customers = new List<Customer>
            {
                new Customer() { Id =1, Name="Avinash"},
                new Customer() { Id = 1, Name="Samarth"}
            };

            RandomMovieViewModel viewModel = new RandomMovieViewModel()
            {
                Movie = movie,
                Customers = customers
            };

            return View(viewModel);
        }

-----------------------------------------------------------------------------

6. Razor Syntax

--> Looking some razor syntax for view file
--> Make new view file for index action method
--> We have used razor syntax for foreach, if, codeblock, text



@model Vidly.ViewModel.RandomMovieViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{ var className = Model.Customers.Count > 0 ? "popup" : null; }		--> code block for logic

<h2 class="@className">@Model.Movie.Name</h2>					--> dynamic rendering of className

@if (Model.Customers.Count < 0)							--> @if
{
    <text>No List to display</text>						--> <text>	--> render text without markup
}
else
{
    <ul>
        @foreach (var customer in Model.Customers)				--> @foreach
        {
            <li>@customer.Name</li>
        }
    </ul>
}


-----------------------------------------------------------------------------

7. Creating Partial View

--> It is also called master page
--> It is also used to breakout large view into smaller views

--> Right click shared folder under views folder --> Add view (select partial view)
--> Name it: _NavBar.cshtml

--> Place all navbar code here

--> In _layout.cshtml

--> Create a placeholder where _Navbar.cshtml partial view will be rendered
@Html.Partial("_NavBar")

--> It will be rendered at this location.

--> To also pass model data to this partial view

@model Vidly.Models.Movie
--> @Html.Partial("_NavBar", Model.Movie.Name)

-----------------------------------------------------------------------------

8. Exercise

--> Make two controllers - Movies and Customer
--> In each index action method - show list of movies and customer respectively. (in table)
--> On clicking on Id, user is redirected to Details/1
--> solution on gihub page of Mosh Hamedani

-----------------------------------------------------------------------------

--> I am showing of one, customer,

--> In CustomersController.cs
--> In GetCustomers method, we can only make object of List, not IEnumerable (IEnumerable is return type and an interface)
--> We have used Linq query to query IEnumerable object in Index and Details actionMethod.
--> After querying, we have pass result to view.

-----------------------------------------------------------------------------

public class CustomersController : Controller
    {
        // GET: Customers
        public ActionResult Index()
        {
            IEnumerable<Customer> customers = GetCustomers().ToList();
            return View(customers);
        }

        public ActionResult Details(int id)
        {
            Customer customer = GetCustomers().SingleOrDefault(x => x.Id == id);
            return View(customer);
        }

        private IEnumerable<Customer> GetCustomers()
        {
            return new List<Customer>
            {
                new Customer { Id=1, Name="Avinash"},
                new Customer { Id=2, Name="Vishal"}
            };
        }

-----------------------------------------------------------------------------

--> In Index.cshtml of CustomerController
--> IEnumerable does not have method for count so used Model.Any() in if block statement
--> Html.ActionLink needs first argument string to converting int Id to string
--> After clicking link button, user is navigated to details actionMethod with parameter id.

@model IEnumerable<Vidly.Models.Customer>
@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Customers</h2>

@if (!Model.Any())
{
    <text>No List to display</text>
}
else
{
    <table class="table table-hover table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Model)
            {
                <tr>
                    <td>@Html.ActionLink(Convert.ToString(customer.Id), "Details", "Customers", new { id = customer.Id }, null)</td>
                    <td>@customer.Name</td>
                </tr>
            }

        </tbody>
    </table>
}

-----------------------------------------------------------------------------

--> In Details.cshtml

@model Vidly.Models.Customer
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@Model.Name</h2>


-----------------------------------------------------------------------------






































































