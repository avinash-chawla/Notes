1. 1-D array-->
var numbers = new int[5] {1,2,3,4,5};

------------------------------------------------------------------------------------------------------------------------------------------------------

2. Rectagular array-->
var matrix = new int[3,5];
var matrix = new int[3,5]
{
    { 1,2,3,4,5},
    {6,7,8,9,10},
    {2,4,6,7,4}
}
var element = matrix[0,0]

------------------------------------------------------------------------------------------------------------------------------------------------------

3. Jagged array-->

var array = new int[3][];

array[0] = new int[4];
array[1] = new int[5];
array[2] = new int[3];

array[0][0] = 1;


------------------------------------------------------------------------------------------------------------------------------------------------------

4. Array methods-->

-->defining
var numbers = new int[] { 3,6,4,3,6,6,43};

var numbers = new[] {3,6,4,3,6,6,43};			--> second syntax for defining array

-->length property
Console.WriteLine("Length: "+numbers.Length);

--> finding index position
var index = Array.IndexOf(numbers, 9);
Console.WriteLine("Index of 9: " + index);

--> clearing values to zero
Array.Clear(numbers, 0, 2); --> make first two numbers to 0 (array, starting_index, length)
foreach(var n in numbers)
	Console.WriteLine(n);

--> Copying Array
int[] another = new int[3];
Array.Copy(numbers, another, 3);		--> copy first 3 elements

int[] another = new int[numbers.Length];
Array.Copy(numbers, another, numbers.Length);

--> Sorting Array
Array.Sort(numbers);
Console.WriteLine("Effect of Sort()");
foreach(var n in numbers);
   Console.WriteLine(n);


--> Reverse Array
Array.Reverse(numbers);
Console.WriteLine("Effect of Sort()");
foreach(var n in numbers);
   Console.WriteLine(n);

------------------------------------------------------------------------------------------------------------------------------------------------------

5. Lists-->

--> array = fixed length
--> lists = dynamic length

--> var numbers = new List<int>();

--> List is generic class
--> generic means you can store anything, 
	primitive types like char, int, float, 
	non primitive types like array, objects, anything
--> generic type is list of that type, mentioned in <> brackets

--> useful methods--> Add(), AddRange(), Remove(), RemoveAt(), IndexOf(), Contains(), Count()
--> using System.Collections.Generic need to include this namespace


var numbers = new List<int>() {1,2,3,4};

--> Add values to list -->
numbers.Add(5);
numbers.AddRange(new int[] { 6, 7, 8 });
	--> add range of values	

--> parameter is like IEnumerable	-> I means interface
--> it means that any class which implements Enumerable interface, instance of that class
 

--> indexOf, Contains, Count-->
Console.WriteLine("Index of 1:"+numbers.IndexOf(1));
Console.WriteLine("Contains 8: "+numbers.Contains(8));
Console.WriteLine("Count "+numbers.Count);

--> Remove() -->
numbers.Remove(1);		--> remove first occurance in list
for (int i = 0; i < numbers.Count; i++)		--> remove all occurance in list
{
	if (numbers[i] == 1)
      		numbers.Remove(numbers[i]);
}

--> can not use foreach in above, came exception-> cannot modify collections

--> Array to String-->

Console.WriteLine(string.Join(",", numbers)); 