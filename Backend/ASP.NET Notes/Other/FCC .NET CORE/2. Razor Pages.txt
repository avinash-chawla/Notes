1. Automatic View Change

--> Open index.cshtml
--> Change heading
--> Save all changes
--> Refresh the browser

--> It is not update automatically like previous versions
--> To enable this view automatically rerender, download new package from nuget pm
--> Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation
--> Just type RuntimeCompilation in search box.

--> In ConfigureService method, (in startup file)

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddRazorPages().AddRazorRuntimeCompilation();
        }

----------------------------------------------------------------------------------

2. Making Model

--> To build any web application, we need entities to which we can relate data to.
--> Make new folder in pages folder --> Model
--> Add new class --> Book.cs

    public class Book
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public string Name { get; set; }
        public string  Author { get; set; }
    }

--> [Key] data annotation will provide auto-increment and primary key
--> Make sure to import necessary classes with ctrl+.

----------------------------------------------------------------------------------

3. Entity Framework packages install

--> In nuget package manager, search for 
--> "Microsoft.EntityFrameworkCore"		(not EntityFramework)
--> "Microsoft.EntityFrameworkCore.SqlServer"
--> "Microsoft.EntityFrameworkCore.Tools"	--> for migrations

----------------------------------------------------------------------------------

4. Connection String

--> In appsettings.json, add this key 

"ConnectionStrings": {
    "DefaultConnection":  "Server= LENOVOSERVER; 
			   database=  BookListRazor; 
			   Trusted_Connection=True; 
			   MultipleActiveResultSets=True"
  },

----------------------------------------------------------------------------------

5. Application Db Context

--> To connect model with Database, we need DbContext class
--> Then this model/class  can be used to query database.
--> Make new class in Model folder --> ApplicationDbContext.cs

    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {

        }

        public DbSet<Book> Book { get; set; }
    }

--> This class is extending DbContext class
--> This is the class which is connected by Database 
--> All models will be register here and then model can be used to query data.

--> In its constructor, we provide dependency injection of DbContextOptions
--> That is only function of constructor to bring dependency injection

--> book model is registered here.

----------------------------------------------------------------------------------

6. To provide dependency in any class, first we need to register in ConfigureServices method in startup.cs file

public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<ApplicationDbContext>(option => option.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

            services.AddRazorPages().AddRazorRuntimeCompilation();
        }

----------------------------------------------------------------------------------

7. First Migration

--> Lets connect first model with database
--> In package manager console,
--> add-migration AddBookToDb

--> This will add migration script in migration folder
--> This is code autogenerated to create database and add table  

--> To update the database with migration file data
--> update-database

----------------------------------------------------------------------------------

8. Make View Page

--> Inside pages folder, make new folder BookList
--> Inside this, make new file Index.html

--> Open Index.cs 

    public class IndexModel : PageModel
    {
        public readonly ApplicationDbContext _db;		--> Make new property _id of type ApplicationDbContext

        public IndexModel(ApplicationDbContext db)		--> this is dependency injection
        {
            _db = db;						--> assigning property to this dependency injection object
        }

        public IEnumerable<Book> Books { get; set; }		--> property Books of type IEnumerable<Book>
        public async Task OnGet()
        {
            Books = await _db.Book.ToListAsync();		
        }
    }

--> data is available in this _db object, so getting List of books and assign to books of type IEnumerable<Book>
--> This method should be async await bec. of asynchornous action.

----------------------------------------------------------------------------------

9. Display List of Books in View

--> First change link in navbar in _layout master page
--> In place of privacy, make it Book
--> In tag helpers, asp-page, use /BookList/Index

----------------------------------------------------------------------------------

<div class="container row p-0 m-0">
    <div class="col-9">
        <h2 class="text-info">Book List</h2>
    </div>
    <div class="col-3">
        <button asp-page="Create" class="btn btn-info form-control text-white">Create Book</button>
    </div>
</div>

<div class="col-12 border p-3 mt-3 ">
    <form method="post">
        @if (Model.Books.Count() > 0)
        {
            <table class="table table-striped table-bordered table-hover">
                <thead>
                    <tr class="table-secondary">
                        <th>
                            <label asp-for="@Model.Books.FirstOrDefault().Name"></label>
                        </th>
                        <th>
                            <label asp-for="@Model.Books.FirstOrDefault().Author"></label>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var book in Model.Books)
                    {
                    <tr>
                        <td>@Html.DisplayFor(m => book.Name)</td>
                        <td>@Html.DisplayFor(m => book.Author)</td>
			<td>
                            <button class="btn btn-danger btn-sm">Delete</button>
                            <a class="btn btn-success btn-sm">Edit</a>
                        </td>
                    </tr>

                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No Books are available</p>
        }
    </form>
</div>

--> We have used html helper method in looping over data, we can also use custom Tag method which we learn in future.
--> We have provided asp-page tag method to Create Book button

----------------------------------------------------------------------------------

10. Modifying model data and update correspoding database using EntityFramework

--> In Book Model

--> Add new property, public string ISBN { get; set; }

--> add-migration AddISBNToBookModel
--> update-database

-----------------------------------------------------------------------------------

11. Making razor page for Creating Book

--> Right click pages folder --> Add Razor View
--> In class file,
 
    public class CreateModel : PageModel
    {
        public readonly ApplicationDbContext _db { get; set; }

        public CreateModel(ApplicationDbContext db)
        {
            _db = db;
        }

        public Book Book { get; set; }
        public void OnGet()
        {

        }
    }

-----------------------------------------------------------------------------------

--> Making Create.cshtml

<br />
<h2 class="text-info">Create new Book</h2>
<br />

<div class="border container" style="padding: 30px;">
    <form>
	<div class="form-group">
	    <div class="col-2">
	    </div>	
	    <div class="col-6">
	    </div>
    </form>
</div>























