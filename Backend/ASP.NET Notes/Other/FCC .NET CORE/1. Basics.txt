1. Intro

--> We can build web application in .net core using 2 ways
1. MVC
2. Razor Pages Application

----------------------------------------------------------------------------------

2. Core Evolution

1996	--> ASP
2002	--> ASP WebForms
2009 	--> ASP.NET MVC
2016	--> ASP.NET Core1
2017 	--> ASP.NET Core2
2019	--> ASP.NET Core3

----------------------------------------------------------------------------------

3. Softwares needed

1. Visual Studio 2019
2. Sql Server

----------------------------------------------------------------------------------

4. Razor Pages

--> Introduced in asp.net core 2.0
--> It is a new feature of ASP.NET Core MVC that makes coding page focused scenarios easier and more productive
--> Razor pages is not just for simple scenarios, everything that you can do with mvc you can do by using Razor pages like Routing, Models, ActionREsult, Tag Helpers and so on.
--> Razor Pages have two parts
1. Razor Page (UI/View)
2. Paga Model (Contains Handlers)

----------------------------------------------------------------------------------

--> Start new Project --> BookListRazor
--> Select .net core 3.1
--> Select template as Razor Pages
--> In solution explorer, Inside pages folder, there are two files 
--> Index.cshtml and Index.cshtml.cs

--> Index.cshtml is view file
--> Index.cs is model containing data and events behind view.
--> Index extends PageModel class which is inside Microsoft.AspNetCore.Mvc.RazorPages;

--------------------------------------------------------------------------------

5. Dependencies

--> All dependendies from nuget package manager will be added in project file
--> Double click Project Name or right click and open project file

--------------------------------------------------------------------------------

6. Meta Package

--> In earlier versions of .net core, metapackage was included as a NuGet package
--> From .net core 3 onwards, meta package is a part of .net core instalation itself, so do not need to include in the project reference anymore.
--> Inside Microsoft.AspNetCore.App

--------------------------------------------------------------------------------

7. launchSettings.json

--> It is file under properties folder
--> When we run the application, this configuration file handles settings with envronment mode
--> Same settings can also be handled in properties of project
--> Right click project --> properties --> debug tab --> set settings

--------------------------------------------------------------------------------

8. wwwroot folder

--> It is folder containing all static files.
--> They is files which are send to client
--> They include html, css, js files

--> No files like razorpages or cs will go here
--> This folder also contains files/libraries for required bootstrap and jquery

--------------------------------------------------------------------------------

9. Pages folder

--> Shared
--> It contains partial views
--> They are like usercontrols means views can be used in multiple pages
--> _layout is default master page for all pages

--> _ViewImports.cshtml
--> It contains all tag helpers
--> Will look at that later

--> _ViewStart.cshtml
--> It contains which master page to use
--> Default is _Layout

--> Index.cshtml
--> It is actual razor page
--> It contains two files --> view and model file
--> View file is contains reference to model file
--> Model file contains data and logic for view
--> Model file extends PageModel class 

--------------------------------------------------------------------------------

10. Routin in Razor Pages

--> There are some rules to follow to get routing of razor pages
--> Routing in asp.net razor pages maps URL's to Physical file on disk
--> Razor pages needs a root folder, in this case, it is Pages folder
--> Index.cshtml is a default document

--> eg.
/		--> /index.cshtml
/index		--> /index.cshtml
/account	--> /account.cshtml	or 	/account/index.cshtml

--------------------------------------------------------------------------------

11. Tag Helpers

--> They are introduced with ASP.Net Core
--> They enable server-side code to participate in creating and rendering HTML elements in Razor files
--> Tag helpers are very focused around the html elements and much more natural to use


--> Html helpers are different and they are just methods.
--> Tag helpers is similar to angular directives
--> Only difference is Tag helpers are for server side rendering in html pages
--> While angular directives for clientside rendering in html pages

--> eg. of Tag helper
--> In angular, we use routerLint to navigate to different component
--> In tag helper, we use asp-page="/Index" to navigate to different razor page

--------------------------------------------------------------------------------

12. Comparison tag and html helper

1. Example1

@Html.Label("FirstName", "FirstName: ", new { @class=" form-control" })
<label class="form-control" asp-for="FirstName"></label>

2. Example2

@Html.Label(m => m.FirstName, new { @class="col-md-2 control-label" })
<label asp-for="firstName" class="col-md-3 control-label"></label>

--> tag-helpers are html-friendly

--------------------------------------------------------------------------------

13. Main method

--> In Earlier version of asp.net, global.aspx file was used 
--> Now, all global methods are included in main method in startup.cs file
--> Web application starts with command line application with main method 
--> Main methods configures asp application  and starts it.

--> Open program.cs
--> There is main method
--> It calles CreateHostBuilder method
--> It hosts configuration for asp and return IHostBuilder
--> On that object, Build and Run are called

--> This CreateHostBuilder also calls startup file	
--> Startup file only contains Microsoft classes not System classes
--> Bec. System is specific to OS.

--> startup file contain main methods - Configure and ConfigureServices

--------------------------------------------------------------------------------

14. Dependency Injection

--> .Net Core bydefault supports dependency injection
--> In startup file, IConfiguration is dependency injection provided to this class.
--> It is called at runtime 
--> It is used to add services of mvc, entity, identity

--> ConfigureServices method will inject Razor Pages to our application
--> Configure method will configure for all http request and response pipeline that is all middlewares.

--------------------------------------------------------------------------------

15. ASP.NET Core Pipeline

--> In pipeline
--> First request reaches at IIS server
--> Then IIS server will call dotnet runtime and load the clr
--> Then request comes to internal server Kestral
--> Then request is processed in application.
--> Then again handled by middleware and finally IIS server give response to broser

--> .net core removes the System.web class which binds the application with IIS server.
--> External servers can be IIS, Apache, xampp, linux, etc.

--------------------------------------------------------------------------------

16. Middleware function in Configure method

--> middleware is defined with app.<middlewareName>

--> app.UseDeveloperExceptionPage();
--> app.UseExceptionHandler()
--> app.UseHsts()
--> app.UseStaticFiles()
--> app.Routing()
--> app.UseAuthorization()
--> app.UseEndpoints()


--> When request comes to server, it is converted into Context object
--> Then middleware handles this Context object acc. to type of request by adding extra information and pass to next middleware or directly send response
--> The order of middleware is important
--> Like auth middleware should be added first.

--------------------------------------------------------------------------------

17. AppSettings.json

--> All of the application settings are contained in a file named appsettings.json
--> Any changes to this file will require restarting the "Microsoft IIS Administration" service to take effect.
--> You can add secret_keys here.

--------------------------------------------------------------------------------

18. Dependency Injection

--> .net core supports dependency injection
--> .net core injects objects of dependency classes through constructor or method by using built-in IOC (Inversion of Control) container
--> DI is a pattern that can help developers decouple the different pieces of ther applications
--> In .net core, both framework services and application services can be injected into your classes, rather than being tightly coupled.

--------------------------------------------------------------------------------

19. IOC

--> It is Inversion of Control container
--> It is framework for controlling automatic dependency injection, it manages object creates and its lifetime and also injects dependencies to class.
--> IOC container creates an object for specified class and also injects all oththe dependency object through constructor, property or method at runtime and disposes it appropriate time.

--> Dependency Injection is a design pattern in which class or object has its dependent classes injected, rather than creating them 

--> Consider it as a container in which all classes resides and whenever any class needs dependency, it will call this container instead of directly calling that specific class

--> Advantage of this container as middleman, object is created by this container and usage happens in different classes.
--> This object is created at runtime by container.

--> Without Dependency Injection,
--> Suppose 3 webpages needs 3 objects of Emails, logs, database
--> So we need to create total 9 objects in each of them 3 objects

--> With Dependency Injection, we need to create only 3 objects instead of 9.

--------------------------------------------------------------------------------
