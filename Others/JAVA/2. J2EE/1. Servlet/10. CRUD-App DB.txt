1. Installing MySql

--> Head over to http://dev.mysql.com/downloads
--> download community edition msi file for windows
--> Run the exe file

--> Select MySQL Workbench in options and execute
--> In all windows, it is default setting

--> Run the MySQL Workbench
--> This is MySQL GUI

----------------------------------------------------------------------------------

2. Setting up our Project Database with Sample Data

--> There are two sql files in resources section
--> create-user.sql and 02-student-tracker.sql

--> Open create-user.sql
--> Run the query with clicking on bolt

--> This will create new user and password for mysql database with all authorities

--> Open 02-student-tracker.sql
--> This will create new database "web_student_tracker" and new table "student"

----------------------------------------------------------------------------------

3. Setup Tomcat Datasource for Connection Pooling

--> Topics
1. Database Connections in web apps
2. Database Connection Pools
3. Setting up a Tomcat Database Connection Pool

----------------------------------------------------------------------------------

--> You may think you only need a single database connection...
--> Will not scale for multiple web users

--> Best practice is to use Database connection Pools
--> Allows your app to scale and handle multiple users quickly	
--> Instead of single connection, tomcat will multiple connections to database
--> All this is configured in context.xml file 

----------------------------------------------------------------------------------

--> Database Connection in Tomcat

1. Download JDBC Driver JAR files
2. Define connection pool in META_INF/context.xml
3. Get connection pool reference in Java code

----------------------------------------------------------------------------------

--> Step1:

1. MySql JDBC Driver
--> http://dev.mysql.com/downloads

2. Place the Jar file in your apps WEB-INF/lib folder

----------------------------------------------------------------------------------

--> Step2: Define connection pool: context.xml

--> This context.xml will be required by tomcat to connect to database
--> This contain all configuration settings related to database with tomcat
--> Like Max Number of connections by tomcat in connection pool available.

--> context.xml

<Context>

  <Resource name="jdbc/web_student_tracker" 
  			auth="Container" type="javax.sql.DataSource"
               maxActive="20" maxIdle="5" maxWait="10000"
               username="webstudent" password="webstudent" 
               driverClassName="com.mysql.jdbc.Driver"
               url="jdbc:mysql://localhost:3306/web_student_tracker?useSSL=false"/>

</Context>

--> name will be used in java class
--> type is java interface, whenever you see DataSource treat as a connection pool
--> auth will tell tomcat that to use authentication while connecting to this database
--> maxActive, maxWait and maxIdle are connection Pools config for tomcat to set connections
--> driverClassName is driver provided by mysql
--> url is just given

--> Consider jdbc as ado.net in C#
--> It is written specific to database language

--> Consider hibernate as Linq and EntityFramework 
--> Consider JPA as EntityFramework ORM. (Java Persistant API)

----------------------------------------------------------------------------------

--> Step3: Get connnection pool in Java code

--> Leverage resource injection with the Servlets
--> This means that tomcat will automagically set the connection pool/ datasource on your servlet

----------------------------------------------------------------------------------
 
4. In Action

--> Create new project --> web-student-tracker
--> Include the MySql Jar file in lib folder from resources in WEB-INF folder
--> Include the context.xml file in META-INF folder from resources

--> Create new package in src folder --> com.luv2code.web.jdbc
--> Make new servlet file in src folder --> TestServlet.java

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.annotation.Resource;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

@WebServlet("/TestServlet")
public class TestServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;	// autogenerated with template

	// Define datasource/connection pool for Resource Injection
	@Resource(name="jdbc/web_student_tracker")
	private DataSource dataSource;
	
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		// Step 1:  Set up the printwriter
		PrintWriter out = response.getWriter();
		response.setContentType("text/plain");
		
		// Step 2:  Get a connection to the database
		Connection myConn = null;
		Statement myStmt = null;
		ResultSet myRs = null;
		
		try {
			myConn = dataSource.getConnection();
			
			// Step 3:  Create a SQL statements
			String sql = "select * from student";
			myStmt = myConn.createStatement();
			
			// Step 4:  Execute SQL query
			myRs = myStmt.executeQuery(sql);
			
			// Step 5:  Process the result set
			while (myRs.next()) {
				String email = myRs.getString("email");
				out.println(email);
			}
		}
		catch (Exception exc) {
			exc.printStackTrace();
		}
	}
}

--> Run the Servlet

----------------------------------------------------------------------------------
 
--> Points:

1. @Resource(name="jdbc/web_student_tracker") means tomcat will inject sql resources to this servlet class.
2. String email = myRs.getString("email"); will get value from email column in each iteration

3. Shortcut to import all dependencies of sql in java file in one go:
--> Go to source tab in eclipse
--> Click on Organize Imports 
--> Click on java.sql.imports
--> Click on java.sql.Connection

----------------------------------------------------------------------------------
 
5. DAO

--> This is a common design pattern: Data Accessor Object (DAO)
--> Responsible for interfacing with the database using JDBC code

--> It is helper class for Db --> StudentDbUtil
--> Servlet controller will talk with this db helper class.

----------------------------------------------------------------------------------
 



























