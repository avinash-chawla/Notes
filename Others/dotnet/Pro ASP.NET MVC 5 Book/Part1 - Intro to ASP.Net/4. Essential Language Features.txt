
1. Essential Features

--> Use automatically implemented properties
--> Use an object or collection initializer 
--> Use an extension method
--> Use a lambda expression
--> Use the var keyword
--> Use an anonymous type
--> Use LINQ
--> Use async and await keywords

-------------------------------------------------------------------------------------

2. Adding the System.Net.Http Assembly

--> Right click Dependencies folder, include this dependency

-------------------------------------------------------------------------------------

3. Automatically Implemented Properties

--> The regular C# property feature lets you expose a piece of data from a class in a way that decouples the data from how it is set and retrieved. 

-------------------------------------------------------------------------------------

        private string name;

        public string Name {
            get { return name; }
            set { name = value; }
        }

--> The property, called Name, is shown in bold. The statements in the get code block (known as the getter) are performed when the value of the property is read, and the statements in the set code block (known as the setter) are performed when a value is assigned to the property (the special variable value represents the assigned value). 

--> A property is consumed by other classes as though it were a field which shows an AutoProperty action method I added to the Home controller.

-------------------------------------------------------------------------------------

--> What I want is the flexibility of properties without having to duplicate the getters and setters. 
--> The solution is an automatically implemented property, also known as an automatic property. 

public string Name { get; set; }

-------------------------------------------------------------------------------------

--> If the day comes when I need to change the way a property is implemented, I can return to the regular property format. 

        private string name;
        public int ProductID { get; set; }

        public string Name {
            get {
                return ProductID + name;
            }
            set {
                name = value;
            }
        }

-------------------------------------------------------------------------------------

4. Object and Collection Initializers

--> Another tiresome programming task is constructing a new object and then assigning values to the properties

        public ViewResult CreateProduct() {
            // create a new Product object
            Product myProduct = new Product();

            // set the property values
            myProduct.ProductID = 100;
            myProduct.Name = "Kayak";
            myProduct.Description = "A boat for one person";
            myProduct.Price = 275M;
            myProduct.Category = "Watersports";
            return View("Result", (object)String.Format("Category: {0}", myProduct.Category));
        }

-------------------------------------------------------------------------------------

    Product myProduct = new Product {
        ProductID = 100, Name = "Kayak",
        Description = "A boat for one person",
        Price = 275M, Category = "Watersports"
    };

-------------------------------------------------------------------------------------

        public ViewResult CreateCollection() {
            string[] stringArray = { "apple", "orange", "plum" };
            List<int> intList = new List<int> { 10, 20, 30, 40 };
            Dictionary<string, int> myDict = new Dictionary<string, int> {
                { "apple", 10 }, { "orange", 20 }, { "plum", 30 }
            };
            return View("Result", (object)stringArray[1]);
        }

-------------------------------------------------------------------------------------

5. Extension Methods

--> Extension methods are a convenient way of adding methods to classes that you do not own and cannot modify directly.

-------------------------------------------------------------------------------------

using System.Collections.Generic;
namespace LanguageFeatures.Models {

    public class ShoppingCart {
        public List<Product> Products { get; set; }
    } 
}

-------------------------------------------------------------------------------------

namespace LanguageFeatures.Models {
    public static class MyExtensionMethods {

        public static decimal TotalPrices(this ShoppingCart cartParam) {
            decimal total = 0;
            foreach (Product prod in cartParam.Products) {
                total += prod.Price;
            }
            return total;
        }
    } 
}

--> This method has access to class object which he is creating extension method for it.

-------------------------------------------------------------------------------------

--> 2 Rules to follow to make Extension method

1. class and method should be static
2. using 'this' keyword in parameter of method

-------------------------------------------------------------------------------------

        public ViewResult UseExtension() {

            ShoppingCart cart = new ShoppingCart {
                Products = new List<Product> {
                    new Product {Name = "Kayak", Price = 275M},
                    new Product {Name = "Lifejacket", Price = 48.95M},
                    new Product {Name = "Soccer ball", Price = 19.50M},
                    new Product {Name = "Corner flag", Price = 34.95M}
                }
            };
            
            decimal cartTotal = cart.TotalPrices();

            return View("Result", (object)String.Format("Total: {0:c}", cartTotal));
        }

-------------------------------------------------------------------------------------

6. Extension Methods to an Interface

--> I can also create extension methods that apply to an interface, which allows me to call the extension method on all of the classes that implement the interface

-------------------------------------------------------------------------------------

namespace LanguageFeatures.Models {

    public class ShoppingCart: IEnumerable<Product> {

        public List<Product> Products { get; set; }

        public IEnumerator<Product> GetEnumerator() {
            return Products.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator() {
            return GetEnumerator();
        }
    } 
}

-------------------------------------------------------------------------------------

namespace LanguageFeatures.Models {

    public static class MyExtensionMethods {

        public static decimal TotalPrices(this IEnumerable<Product> productEnum) {
            decimal total = 0;
            foreach (Product prod in productEnum) {
                total += prod.Price;
            }
            return total;
        }
    } 
}

-------------------------------------------------------------------------------------

       public ViewResult UseExtensionEnumerable() {
            IEnumerable<Product> products = new ShoppingCart {
                Products = new List<Product> {
                    new Product {Name = "Kayak", Price = 275M},
                    new Product {Name = "Lifejacket", Price = 48.95M},
                    new Product {Name = "Soccer ball", Price = 19.50M},
                    new Product {Name = "Corner flag", Price = 34.95M}
                }
            };

            Product[] productArray = {
                new Product {Name = "Kayak", Price = 275M},
                new Product {Name = "Lifejacket", Price = 48.95M},
                new Product {Name = "Soccer ball", Price = 19.50M},
                new Product {Name = "Corner flag", Price = 34.95M}
            };

            decimal cartTotal = products.TotalPrices();
            decimal arrayTotal = products.TotalPrices();

            return View("Result",
                (object)String.Format("Cart Total: {0}, Array Total: {1}", cartTotal, arrayTotal));
        }
    } 

-------------------------------------------------------------------------------------

7. Filtering Extension Methods

--> The last thing I want to show you about extension methods is that they can be used to filter collections of objects. 
--> An extension method that operates on an IEnumerable<T> and that also returns an IEnumerable<T> can use the yield keyword to apply selection criteria to items in the source data to produce a reduced set of results. 

-------------------------------------------------------------------------------------

        public static IEnumerable<Product> FilterByCategory(this IEnumerable<Product> productEnum, string categoryParam) {
            foreach (Product prod in productEnum) {
                if (prod.Category == categoryParam) {
                    yield return prod;
                }
            }
        }

-------------------------------------------------------------------------------------

        public ViewResult UseFilterExtensionMethod() {
            IEnumerable<Product> products = new ShoppingCart {
                Products = new List<Product> {
                    new Product {Name = "Kayak", Category = "Watersports", Price = 275M},
                    new Product {Name = "Lifejacket", Category = "Watersports", Price = 48.95M},
                    new Product {Name = "Soccer ball", Category = "Soccer", Price = 19.50M},
                    new Product {Name = "Corner flag", Category = "Soccer", Price = 34.95M}
                }
            };
            decimal total = 0;
            foreach (Product prod in products.FilterByCategory("Soccer")) {
                total += prod.Price;
            }
            return View("Result", (object)String.Format("Total: {0}", total));
        }

-------------------------------------------------------------------------------------

8. Lambda Expressions

--> I can use a delegate to make my FilterByCategory method more general. 
--> That way, the delegate that will be invoked against each Product can filter the objects

-------------------------------------------------------------------------------------

        public static IEnumerable<Product> Filter(this IEnumerable<Product> productEnum, Func<Product, bool> selectorParam) {
            foreach (Product prod in productEnum) {
                if (selectorParam(prod)) {
                    yield return prod;
                }
            }
        }

-------------------------------------------------------------------------------------

public ViewResult UseFilterExtensionMethod() {

    IEnumerable<Product> products = new ShoppingCart { 
	Products = new List<Product> {
            new Product {Name = "Kayak", Category = "Watersports", Price = 275M},
            new Product {Name = "Lifejacket", Category = "Watersports", Price = 48.95M},
            new Product {Name = "Soccer ball", Category = "Soccer", Price = 19.50M},
            new Product {Name = "Corner flag", Category = "Soccer", Price = 34.95M}
        }
    };

    Func<Product, bool> categoryFilter = delegate(Product prod) {
        return prod.Category == "Soccer";
    };

    decimal total = 0;
    foreach (Product prod in products.Filter(categoryFilter)) {
        total += prod.Price;
    }
    return View("Result", (object)String.Format("Total: {0}", total)); 
} 


--> I have taken a step forward, in the sense that I can now filter the Product objects using any criteria specified in the delegate, but I must define a Func for each kind of filtering that I want, which is not ideal. 

--> The less verbose alternative is to use a lambda expression, which is a concise format for expressing a method body in a delegate. 

-------------------------------------------------------------------------------------

--> Alternative Approach,

Func<Product, bool> categoryFilter = prod => prod.Category == "Soccer";

-------------------------------------------------------------------------------------

public ViewResult UseFilterExtensionMethod() {
    IEnumerable<Product> products = new ShoppingCart {
        Products = new List<Product> {
            new Product {Name = "Kayak", Category = "Watersports", Price = 275M},
            new Product {Name = "Lifejacket", Category = "Watersports", Price = 48.95M},
            new Product {Name = "Soccer ball", Category = "Soccer", Price = 19.50M},
            new Product {Name = "Corner flag", Category = "Soccer", Price = 34.95M}
        }
    };
    decimal total = 0;
    foreach (Product prod in products.Filter(prod => prod.Category == "Soccer")) {		// this Line
        total += prod.Price;
    }
    return View("Result", (object)String.Format("Total: {0}", total)); 
} 

-------------------------------------------------------------------------------------

    foreach (Product prod in products.Filter(prod => prod.Category == "Soccer" || prod.Price > 20)) {
        total += prod.Price;
    }

-------------------------------------------------------------------------------------

9. Automatic Type Inference

--> The C# var keyword allows you to define a local variable without explicitly specifying the variable type

-------------------------------------------------------------------------------------

10. Anonymous Types

--> By combining object initializers and type inference, I can create simple data-storage objects without needing to define the corresponding class or struct.

var myAnonType = new {
    Name = "MVC",
    Category = "Pattern" 
};

-->  This does not mean that it is dynamic in the sense that JavaScript variables are dynamic. 
--> It just means that the type definition will be created automatically by the compiler.

--> Strong typing is still enforced.

-------------------------------------------------------------------------------------

11. Language Integrated Queries

--> Querying Without LINQ

public ViewResult FindProducts() {
    Product[] products = {
        new Product {Name = "Kayak", Category = "Watersports", Price = 275M},
        new Product {Name = "Lifejacket", Category = "Watersports", Price = 48.95M},
        new Product {Name = "Soccer ball", Category = "Soccer", Price = 19.50M},
        new Product {Name = "Corner flag", Category = "Soccer", Price = 34.95M}
    };

    Product[] foundProducts = new Product[3];
 
    Array.Sort(products, (item1, item2) => {
        return Comparer<decimal>.Default.Compare(item1.Price, item2.Price);
    });

    Array.Copy(products, foundProducts, 3);

    StringBuilder result = new StringBuilder();
    foreach (Product p in foundProducts) {
        result.AppendFormat("Price: {0} ", p.Price);
    }
    return View("Result", (object)result.ToString()); 

} 

-------------------------------------------------------------------------------------

--> Querying with LINQ

namespace LanguageFeatures.Controllers {
    public class HomeController : Controller {
        
	public ViewResult FindProducts() {
            Product[] products = {
             new Product {Name = "Kayak", Category = "Watersports", Price = 275M},
             new Product {Name = "Lifejacket", Category = "Watersports", Price = 48.95M},
             new Product {Name = "Soccer ball", Category = "Soccer", Price = 19.50M},
             new Product {Name = "Corner flag", Category = "Soccer", Price = 34.95M}
            };
            var foundProducts = from match in products
                                orderby match.Price descending
                                select new { match.Name, match.Price };
            // create the result
            int count = 0;
            StringBuilder result = new StringBuilder();
            foreach (var p in foundProducts) {
                result.AppendFormat("Price: {0} ", p.Price);
                if (++count == 3) {
                    break;
                }
            }
            return View("Result", (object)result.ToString());
        }
    } 
}

-------------------------------------------------------------------------------------

--> Using LINQ Dot Notation 

    var foundProducts = products.OrderByDescending(e => e.Price)
                            .Take(3)
                            .Select(e => new { e.Name, e.Price });


--> The Select method allows me to project my results, specifying the structure I want. 
--> In this case, I am projecting an anonymous object that contains the Name and Price properties.

-------------------------------------------------------------------------------------

12. Useful LINQ Extension Methods

All
Any
Contains
Count
First
FirstOrDefault
Last
LastOrDefault
Max
Min
OrderBy
OrderByDescending
Reverse
Select
SelectMany
Single
SingleOrDefault
Skip
SkipWhile
Sum
Take
TakeWhile
ToArray
ToDictionary
ToList
Where

-------------------------------------------------------------------------------------

13. Using Asynchronous Methods

--> Asynchronous methods perform work in the background and notify you when they are complete, allowing your code to take care of other business while the background work is performed.

--> They help in removing bottlenecks from code and allow applications to take advantage of multiple processors and processor cores to perform work in parallel. 

----------------------------------------------------------------------------------------

using System.Net.Http;
using System.Threading.Tasks;

public static Task<long?> GetPageLength() {

    HttpClient client = new HttpClient();

    var httpTask = client.GetAsync("http://apress.com");

    return httpTask.ContinueWith((Task<HttpResponseMessage> antecendent) => {
	return antecendent.Result.Content.Headers.ContentLength;
    });
}

--> client.GetAsync returns Task<HttpResponseMessage>
--> This tells me that request will be performed in the background.
--> To get the result from that object when it gets ready, we use ContinueWith method

----------------------------------------------------------------------------------------

public async static Task<long?> GetPageLength() {

    HttpClient client = new HttpClient();

    var httpMessage = await client.GetAsync("http://apress.com");

    return httpMessage.Content.Headers.ContentLength;
}

----------------------------------------------------------------------------------------

27. Using an Asynchronous Enumerable

public static async Task<IEnumerable<long?>> GetPageLengths(
	List<string> output, params string[] urls) {

	List<long?> results = new List<long?>();
	
	HttpClient client = new HttpClient();

 	foreach(string url in urls) {
	    output.Add($"Started request for {url}");
	    var httpMessage = await client.GetAsync($"http://{url}");
	    output.Add($"Completed request for {url}");
	    yield return httpMessage.Content.Headers.ContentLength;
	}

	return results;
}

----------------------------------------------------------------------------------------

List<string> output = new List<string>();

await foreach(long? len in await MyAsyncMethods.GetPageLengths(output, "apress.com",
		"microsoft.com", "amazon.com" )) {
	output.Add($"Page Length: {len}");

}
return View(output);

-------------------------------------------------------------------------------------

28. Summary	

--> In this chapter, I gave you an overview of the key C# language features that an effective MVC programmer needs to know. 
--> These features are combined in LINQ, which I use to query data throughout this book. 

--> I also showed you the async and await keywords, which make it easier to work with asynchronous methods
--> In the next chapter, I turn my attention to the Razor View Engine, which is the mechanism by which dynamic data is inserted into views.

-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------


