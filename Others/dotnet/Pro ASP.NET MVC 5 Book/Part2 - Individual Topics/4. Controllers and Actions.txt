
1. Intro

--> Every request that comes to your application is handled by a controller. 
--> Controllers do not contain or store data, nor do they generate user interfaces.

--> Controllers are responsible for processing incoming requests, performing operations on the domain model, and selecting views to render to the user. 

-------------------------------------------------------------------------------------

2. Controller behind the Scenes

--> In the MVC Framework, controller classes must implement the IController interface from the System.Web.Mvc namespace

public interface IController {
    void Execute(RequestContext requestContext); 
}


--> I got the definition of this interface by downloading the MVC Framework source code, which is endlessly useful for figuring out how things work behind the curtain 

--> This is a simple interface. The sole method, Execute, is invoked when a request is targeted at the controller class. 
--> The MVC Framework knows which controller class has been targeted in a request by reading the value of the controller property generated by the routing data, or through your custom routing classes 

-------------------------------------------------------------------------------------

3. Create Controller

--> BasicController.cs 

using System.Web.Mvc; 
using System.Web.Routing;

namespace ControllersAndActions.Controllers {

    public class BasicController : IController {

        public void Execute(RequestContext requestContext) {

            string controller = (string)requestContext.RouteData.Values["controller"];
            string action = (string)requestContext.RouteData.Values["action"];

            requestContext.HttpContext.Response.Write(string.Format("Controller: {0}, Action: {1}", controller, action));
        }
    } 
}

--> The Execute method of the IController interface is passed to a System.Web.Routing.RequestContext object that provides information about the current request and the route that matched it (and led to this controller being invoked to process that request). 

--> The RequestContext class defines two properties,

HttpContext 	- Returns an HttpContextBase object that describes the current request
RouteData 	- Returns a RouteData object that describes the route that matched the request

-------------------------------------------------------------------------------------

4. The Properties Defined by the RouteData Class

Route 		- Returns the RouteBase implementation that matched the route
RouteHandler 	- Returns the IRouteHandler that handled the route
Values 		- Returns a collection of segment values, indexed by name

-------------------------------------------------------------------------------------

5. Class names end with Base

-------------------------------------------------------------------------------------

6. Creating a Controller by Deriving from the Controller Class

--> The Controller class provides three key features:

1. Action methods

--> A controller’s behavior is partitioned into multiple methods (instead of having just one single Execute() method). 
--> Each action method is exposed on a different URL and is invoked with parameters extracted from the incoming request.

2. Action results

--> You can return an object describing the result of an action (for example, rendering a view, or redirecting to a different URL or action method), which is then carried out on your behalf. 
--> The separation between specifying results and executing them simplifies unit testing.

3. Filters

--> You can encapsulate reusable behaviors (for example, authentication, as you saw in Chapter 12) as filters, and then tag each behavior onto one or more controllers or action methods by putting an attribute in your source code.

-------------------------------------------------------------------------------------

namespace ControllersAndActions.Controllers {

    public class DerivedController : Controller {

        public ActionResult Index() {
            ViewBag.Message = "Hello from the DerivedController Index method";
            return View("MyView");
        }
    } 
}

-------------------------------------------------------------------------------------

--> MyView.cshtml

@{
    ViewBag.Title = "MyView"; 
}

<h2>MyView</h2>
Message: @ViewBag.Message

-------------------------------------------------------------------------------------

--> If you start the application and navigate to /Derived/Index, the action method will be invoked and the view  I named will be rendered

-------------------------------------------------------------------------------------

7. Receiving Request Data

--> Controllers frequently need to access data from the incoming request, such as query string values, form values, and parameters parsed from the URL by the routing system. 

--> There are three main ways to access that data:

1. Extract it from a set of context objects.
2. Have the data passed as parameters to your action method.
3. Explicitly invoke the framework’s model binding feature.
 

-------------------------------------------------------------------------------------

8. Getting Data from Context Objects

--> When you create a controller by deriving from the Controller base class, you get access to a set of convenience properties to access information about the request. --> These properties include Request, Response, RouteData, HttpContext, and Server. Each provides information about a different aspect of the request. 

--> I refer to these as convenience properties, because they each retrieve different types of data from the request’s ControllerContext instance (which can be accessed through the Controller.ControllerContext property). 

-------------------------------------------------------------------------------------

9. Commonly Used Context Objects and Properties

Property			Type				Description

Request.QueryString		NameValueCollection		GET variables sent with this request
Request.Form			NameValueCollection		POST variables sent with this request
Request.Cookies			HttpCookieCollection		Cookies sent by the browser with this request
Request.HttpMethod		string				The HTTP method (verb, such as GET or POST) used for this request

Request.Headers			NameValueCollection		The full set of HTTP headers sent with this request
Request.Url			Uri				The URL requested
Request.UserHostAddress		string				The IP address of the user making this request

RouteData.Route			RouteBase			The chosen RouteTable.Routes entry for this request
RouteData.Values		RouteValueDictionary		Active route parameters (either extracted from the URL or default values)

HttpContext.Application		HttpApplicationStateBase	Application state store
HttpContext.Cache		Cache				Application cache store
HttpContext.Items		IDictionary			State store for the current request
HttpContext.Session		HttpSessionStateBase		State store for the visitor’s session

User				IPrinciple			Authentication information about the logged-in user
TempData			TempDataDictionary		Temporary data items stored for the current user

-------------------------------------------------------------------------------------

--> The individual properties that I refer to here—Request, HttpContext, and so on—provide context objects.
--> An action method can use any of these context objects to get information about the request

-------------------------------------------------------------------------------------

--> An Action Method Using Context Objects to Get Information About a Request


public ActionResult RenameProduct() {

    // Access various properties from context objects
    string userName = User.Identity.Name;
    string serverName = Server.MachineName;

    string clientIP = Request.UserHostAddress;
    DateTime dateStamp = HttpContext.Timestamp;

    AuditRequest(userName, serverName, clientIP, dateStamp, "Renaming product");

    // Retrieve posted data from Request.Form
    string oldProductName = Request.Form["OldName"];
    string newProductName = Request.Form["NewName"];

    bool result = AttemptProductRename(oldProductName, newProductName);
    ViewData["RenameResult"] = result;

    return View("ProductRenamed"); 
} 


-------------------------------------------------------------------------------------

10. Using Action Method Parameters

--> As you’ve seen in previous chapters, action methods can take parameters. 
--> This is a neater way to receive incoming data than extracting it manually from context objects, and it makes your action methods easier to read. 

--> For example, suppose I have an action method that uses context objects like this:

public ActionResult ShowWeatherForecast() {

    string city = (string)RouteData.Values["city"];
    DateTime forDate = DateTime.Parse(Request.Form["forDate"]);

    return View(); 
} 

-------------------------------------------------------------------------------------

--> I can rewrite it to use parameters, like this:

public ActionResult ShowWeatherForecast(string city, DateTime forDate) {
    return View(); 
}

-------------------------------------------------------------------------------------

--> It is worth noting that action methods aren’t allowed to have out or ref parameters. 
--> It wouldn’t make any sense if they did and the MVC Framework will simply throw an exception if it sees such a parameter.

-------------------------------------------------------------------------------------

--> The MVC Framework will provide values for action method parameters by checking the context objects and properties automatically, including Request.QueryString, Request.Form, and RouteData.Values. 

--> The names of  the parameters are treated case-insensitively, so that an action method parameter called city can be populated by  a value from Request.Form["City"]

-------------------------------------------------------------------------------------

11. Understanding How Parameters Objects Are Instantiated 

--> The base Controller class obtains values for action method parameters using MVC Framework components called value providers and model binders. 
--> Value providers represent the set of data items available to your controller. There are built-in value providers that fetch items from Request.Form, Request.QueryString, Request.Files, and RouteData.Values. 

--> The values are then passed to model binders that try to map them to the types that your action methods require as parameters.
--> The default model binders can create and populate objects of any .NET type, including collections and  project-specific custom types.

-------------------------------------------------------------------------------------

12. Understanding Optional and Compulsory Parameters

--> If the MVC Framework cannot find a value for a reference type parameter (such as a string or object), the action method will still be called, but using a null value for that parameter. 

--> If a value cannot be found for a value type parameter (such as int or double), then an exception will be thrown, and the action method will not be called. 

-------------------------------------------------------------------------------------

--> Value-type parameters are compulsory. To make them optional, either specify a default value (see the next section) or change the parameter type to a nullable type (such as int? or DateTime?), so the MVC Framework can pass null if no value is available.

--> Reference-type parameters are optional. To make them compulsory (to ensure that a non-null value is passed), add some code to the top of the action method to reject null values. For example, if the value equals null, throw an ArgumentNullException.

-------------------------------------------------------------------------------------

13. Specifying Default Parameter Values

--> If you want to process requests that do not contain values for action method parameters, and you want to use default values

public ActionResult Search(string query= "all", int page = 1) {
    return View(); 
}
 
-->  The MVC Framework will try to obtain values from the request for these parameters, but if there are no values available, the defaults I have specified will be used instead.

-------------------------------------------------------------------------------------

--> If a request does contain a value for a parameter but it cannot be converted to the correct type (for example, if the user gives a nonnumeric string for an int parameter), then the framework will pass the default value for that  parameter type (for example, 0 for an int parameter), and will register the attempted value as a validation error in a special context object called ModelState. 

--> Unless you check for validation errors in ModelState, you can get into odd situations where the user has entered bad data into a form, but the request is processed as though the user had not entered any data or had entered the default value. See Chapter 25 for details of validation and ModelState, which can be used to avoid such problems

-------------------------------------------------------------------------------------

14. Producing Output

--> Using BasicController.cs

namespace ControllersAndActions.Controllers {

    public class BasicController : IController {

        public void Execute(RequestContext requestContext) {

            string controller = (string)requestContext.RouteData.Values["controller"];
            string action = (string)requestContext.RouteData.Values["action"];

            if (action.ToLower() == "redirect") {
                requestContext.HttpContext.Response.Redirect("/Derived/Index");
            } else {
                requestContext.HttpContext.Response.Write(string.Format("Controller: {0}, Action: {1}", controller, action));
            }
        }
    }

-------------------------------------------------------------------------------------

--> Using DerivedController.cs 

namespace ControllersAndActions.Controllers {

    public class DerivedController : Controller {

        public ActionResult Index() {
            ViewBag.Message = "Hello from the DerivedController Index method";
            return View("MyView");
        }

        public void ProduceOutput() {
            if (Server.MachineName == "TINY") {
                Response.Redirect("/Basic/Index");
            } else {
                Response.Write("Controller: Derived, Action: ProduceOutput");
            }
        }
    } 
}

-------------------------------------------------------------------------------------

--> This approach works, but it has a few problems:

1. The controller classes must contain details of HTML or URL structure, which makes the classes harder to read and maintain.
2. It is hard to unit test a controller that generates its response directly to the output.
3. Handling the fine detail of every response this way is tedious and error-prone. 

-------------------------------------------------------------------------------------

15. Understanding Action Results

--> The MVC Framework uses action results to separate stating intentions from executing intentions. 
--> Instead of working directly with the Response object, action methods return an object derived from the ActionResult class that describes what the response from controller will be, such as rendering a view or redirecting to another URL or action method. 

--> But—and this is where the indirection comes in—you don’t generate the response directly. Instead, you create an ActionResult object that the MVC Framework processes to produce the result for you, after the action method has been invoked.

-------------------------------------------------------------------------------------

--> The system of action results is an example of the command pattern. This pattern describes scenarios  where you store and pass around objects that describe operations to be performed.

-------------------------------------------------------------------------------------

public ActionResult ProduceOutput() {
    return Redirect("/Basic/Index"); 
} 

-------------------------------------------------------------------------------------

16. Built-in ActionResult Types

ViewResult
PartialViewResult
RedirectToRouteResult

RedirectResult
ContentResult
FileResult

JsonResult
JavascriptResult

HttpUnauthorizedResult
HttpNotFoundResult
HttpStatusCodeResult

EmptyResult

-------------------------------------------------------------------------------------

17. Returning HTML by Rendering a View

--> The most common kind of response from an action method is to generate HTML and send it to the browser. 

        public ViewResult Index() {
            return View("Homepage");
        }

--> When using the action result system, you specify the view that you want the MVC Framework to render 
--> Notice that that the return type for the action method in the listing is ViewResult. 

--> The method would compile and work just as well if I had specified the more general ActionResult type. 

-------------------------------------------------------------------------------------

--> When the MVC Framework calls the ExecuteResult method of the ViewResult object, a search will begin for the view that you have specified. 

--> As soon as it locates a match, it uses that view to render the result of the action method.

-------------------------------------------------------------------------------------

--> Creating a ViewResult Without Specifying a View 

--> The MVC Framework assumes that I want to render a view that has the same name as the action method. 
--> The MVC Framework actually gets the name of the action method from the RouteData.Values["action"] value

--> The action method name and the routing value will be the same if you are using the built-in routing classes, but this may not be the case if you have implemented custom routing classes which do not follow the MVC Framework conventions.

-------------------------------------------------------------------------------------

--> There are a number of overridden versions of the View method. 
--> They correspond to setting different properties on the ViewResult object that is created. 

--> For example, you can override the layout used by a view by explicitly naming an alternative

public ViewResult Index() {
    return View("Index", "_AlternateLayoutPage"); 
} 

-------------------------------------------------------------------------------------

18. Specifying a view by its path

        public ViewResult Index() {
            return View("~/Views/Other/Index.cshtml");
        }

--> The naming convention approach is convenient and simple, but it does limit the views you can render. 
--> If you want to render a specific view, you can do so by providing an explicit path and bypass the search phase.

--> When you specify a view like this, the path must begin with / or ~/ and include the file name extension 

-------------------------------------------------------------------------------------

19. Passing Data from an Action Method to a View

--> You can send an object to the view by passing it as a parameter to the View method

        public ViewResult Index() {
            DateTime date = DateTime.Now;
            return View(date);
        }

--> I passed a DateTime object as the view model and I can access the object in the view using the Razor Model keyword. 

-------------------------------------------------------------------------------------

--> Index.cshtml

@model DateTime
@{
    ViewBag.Title = "Index"; 
}

<h2>Index</h2>
The day is: @Model.DayOfWeek

-------------------------------------------------------------------------------------

20. Passing Data with the View Bag

--> This feature allows you to define properties on a dynamic object and access them in a view. 
--> The dynamic object is accessed through the Controller.ViewBag property

        public ViewResult Index() {
            ViewBag.Message = "Hello";
            ViewBag.Date = DateTime.Now;
            return View();
        }

--> In View,

The day is: @ViewBag.Date.DayOfWeek <p />
The message is: @ViewBag.Message

--> Visual Studio cannot provide IntelliSense support for any dynamic objects, including the ViewBag, and errors such as this won’t be revealed until the view is rendered.

-------------------------------------------------------------------------------------

21. Performing Redirections

--> The most frequent use of a redirect is in action methods that process HTTP POST requests
--> When you perform a redirect, you send one of two HTTP codes to the browser:

1. Send the HTTP code 302, which is a temporary redirection. This is the most frequently used type of redirection and when using the Post/Redirect/Get pattern, this is the code that you want to send. 

2. Send the HTTP code 301, which indicates a permanent redirection. This should be used with caution, because it instructs the recipient of the HTTP code not to request the original URL ever again and to use the new URL that is included alongside the redirection code. If you are in doubt, use temporary redirections; that is, send code 302.
 

-------------------------------------------------------------------------------------

22. Redirecting to a Literal URL

--> The most basic way to redirect a browser is to call the Redirect method, which returns an instance of the RedirectResult class

        public RedirectResult Redirect() {
            return Redirect("/Example/Index");
        }

-------------------------------------------------------------------------------------

23. Redirecting to a Routing System URL

--> If you are redirecting the user to a different part of your application, you need to make sure that the URL you send is valid within your URL schema. 
--> The problem with using literal URLs for redirection is that any change in your routing schema means that you need to go through your code and update the URLs. 
--> Fortunately, you can use the routing system to generate valid URLs with the RedirectToRoute method, which creates an instance of the RedirectToRouteResult

        public RedirectToRouteResult Redirect() {
            return RedirectToRoute(new {
                controller = "Example",
                action = "Index",
                ID = "MyID"
            });
        }

--> The RedirectToRoute method issues a temporary redirection. Use the RedirectToRoutePermanent method for permanent redirections. 
--> Both methods take an anonymous type whose properties are then passed to the routing system to generate a URL. 

-------------------------------------------------------------------------------------

24. Redirecting to an Action Method

--> You can redirect to an action method more elegantly by using the RedirectToAction method 
--> These are just wrappers around the RedirectToRoute method that lets you specify values for the action method and the controller without needing to create an anonymous type.

public RedirectToRouteResult Redirect() {
    return RedirectToAction("Index"); 
} 

-------------------------------------------------------------------------------------

--> If you just specify an action method, then it is assumed that you are referring to an action method in the current controller. 
--> If you want to redirect to another controller, you need to provide the name as a parameter, 

public RedirectToRouteResult Redirect() {
    return RedirectToAction("Index", "Basic"); 
} 

-------------------------------------------------------------------------------------

25. Preserving Data across Redirections

--> A redirection causes the browser to submit an entirely new HTTP request, which means that you do not have access to the details of the original request. 
--> If you want to pass data from one request to the next, you can use the Temp Data feature.

--> TempData is similar to Session data, except that TempData values are marked for deletion when they are read, and they are removed when the request has been processed. 

--> This is an ideal arrangement for short-lived data that you want to persist across a redirection

-------------------------------------------------------------------------------------

--> Here is a simple example in an action method that uses the RedirectToAction method:

public RedirectToRouteResult RedirectToRoute() {
    TempData["Message"] = "Hello";
    TempData["Date"] = DateTime.Now;

    return RedirectToAction("Index"); 
} 

-------------------------------------------------------------------------------------

--> When this method processes a request, it sets values in the TempData collection, and then redirects the user’s browser to the Index action method in the same controller. You can read the TempData values back in the target action method, and then pass them to the view

public ViewResult Index() {
    ViewBag.Message = TempData["Message"];
    ViewBag.Date = TempData["Date"];
    return View(); 
} 

-------------------------------------------------------------------------------------

--> A more direct approach would be to read these values in the view, like this:

The day is: @(((DateTime)TempData["Date"]).DayOfWeek) <p />
The message is: @TempData["Message"]

-------------------------------------------------------------------------------------

--> Reading the values in the view means that you do not need to use the View Bag feature in the action method. However, you must cast the TempData results to an appropriate type.

--> You can get a value from TempData without marking it for removal by using the Peek method, like this:
...
DateTime time = (DateTime)TempData.Peek("Date"); ...

--> You can preserve a value that would otherwise be deleted by using the Keep method, like this:
...
TempData.Keep("Date"); ...

--> The Keep method doesn’t protect a value forever. If the value is read again, it will be marked for removal once more. If you want to store items so that they won’t be removed when the request is processed then use session data instead.

-------------------------------------------------------------------------------------

26. Returning Errors and HTTP Codes

--> The last of the built-in ActionResult classes that I will look at can be used to send specific error messages and HTTP result codes to the client. 
--> Most applications do not require these features because the MVC Framework will automatically generate these kinds of results. 

--> However, they can be useful if you need to take more direct control over the responses sent to the client.

-------------------------------------------------------------------------------------

27. Sending a Specific HTTP Result Code

--> You can send a specific HTTP status code to the browser using the HttpStatusCodeResult class. 
--> There is no controller helper method for this, so you must instantiate the class directly

        public HttpStatusCodeResult StatusCode() {
            return new HttpStatusCodeResult(404, "URL cannot be serviced");
        }

-------------------------------------------------------------------------------------

28. Sending a 404 Result

--> I can achieve the same effect using the more convenient HttpNotFoundResult class, which is derived from HttpStatusCodeResult and can be created using the controller HttpNotFound convenience method

public HttpStatusCodeResult StatusCode() {
    return HttpNotFound(); 
} 

-------------------------------------------------------------------------------------

29. Sending a 401 Result

public HttpStatusCodeResult StatusCode() {
    return new HttpUnauthorizedResult(); 
}

--> There is no helper method in the Controller class to create instances of HttpUnauthorizedResult, so you must do so directly. 
--> The effect of returning an instance of this class is usually to redirect the user to the authentication page

-------------------------------------------------------------------------------------

30. Summary

--> Controllers are one of the key building blocks in the MVC design pattern. In this chapter, you have seen how to create “raw” controllers by implementing the IController interface and more convenient controllers by deriving from the Controller class. 

--> You saw the role that action methods play in MVC Framework controllers and how they ease unit testing. 
--> I showed you the different ways that you can receive input and generate output from an action method and demonstrated the different kinds of ActionResult that make this a simple and flexible process. 

--> In the next chapter, I go deeper into the controller infrastructure to show you the filters feature, which changes how requests are processed.

-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------


