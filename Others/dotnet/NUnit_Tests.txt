1. Without Testing

--> Fixing Bugs can be 
1. Costly
2. Stressful
3. Time Consuming

---------------------------------------------------------------------------------------

2. Pyramid of Testing

1. Unit Testing			--> Individual components
2. Integration			--> Combining components
3. Acceptance			--> Business Logic
4. User Interface		--> Presentation Logic
5. Manual			--> Manual Testing

---------------------------------------------------------------------------------------

3. Unit Testing Benefits

1. Easy to refactor
2. Reusable code
3. Faster Development
4. Easy Debugging
5. Reduced costs


--> Main thing is while adding new feature to existing project might break the project.
--> Tips:
1. Do not unit test everything
2. Use data close to production data
3. Write tests that are independent of other unit test.

---------------------------------------------------------------------------------------

4. Frameworks used for Unit testing

1. MSTest
2. NUnit
3. xUnit.net

---------------------------------------------------------------------------------------

5. MSTest Elements

--> This test is inbuilt in visual studio
--> It uses MSTest.exe from command line.

---------------------------------------------------------------------------------------

--> [TestClass]
--> It is an attribute applied to a class whose unit testing to be performed

--> [TestMethod]
--> It is an attribute applied to a method whose unit testing to be performed

--> Assert
--> It is keyword to test a condition or behavior against an expected result

---------------------------------------------------------------------------------------

--> It also provides Initialization and cleanup methods which can be used to clean connections after executions

---------------------------------------------------------------------------------------

6. NUnit Features

--> It is similar to JUnit
--> It runs very well with .Net programming languages (C#, VB.Net)
--> It is Open source
--> It can be used with a GUI or command line.

---------------------------------------------------------------------------------------

[Setup]
--> It identify classes contain test methods

[Test]
--> It identity methods that contain test code.

[TestCase]
--> It run same test methods with different data inputs

[TestCaseSource]
--> It load a record from csv file or from database

[TearDown]
--> It is opposite of [Setup]
--> Used in cleaning up


---------------------------------------------------------------------------------------

7. xUnit.net elements

[Fact] 
--> It test methods without parameter

[Theory]
--> It test methods with paramter

[InlineData], [MemberData], [ClassData] --> passing data to a unit test

---------------------------------------------------------------------------------------

8. Comparison of Elements

MSTest			NUnit			xUnit.net

TestClass		TestFixture
TestMethod		Test			Fact
TestInitialize		Setup			Constructor
TestCleanup		TearDown		Dispose
Ignore			Ignore("reason"0)	Fact(Skip="reason")
DataSource		Theory			Theory, MemberData, InlineData

---------------------------------------------------------------------------------------

9. 

---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------






















































