1. What is ASP.NET Core Applications

--> Asp.net core is a platform over which different applications can be built.
--> Different Applications like MVC, razor, APIs

--> All such applications uses common features like

1. View Components
2. Tag Helpers
3. Model Binding
4. Model Validation
5. Filters
6. Form Applications

----------------------------------------------------------------------------------------

2. Adding Entity Framework Core

dotnet add package Microsoft.EntityFrameworkCore.Design --version 3.1.1 
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 3.1.1
dotnet tool install --global dotnet-ef --version 3.1.1

----------------------------------------------------------------------------------------

3. Data Model

    public class Category {
 
        public long CategoryId { get; set; }
        public string Name { get; set; }
        public IEnumerable<Product> Products { get; set; }
    } 


    public class Supplier {

        public long SupplierId { get; set; }
        public string Name { get; set; }
        public string City { get; set; }
        public IEnumerable<Product> Products { get; set; }
    } 

    public class Product {

        public long ProductId { get; set; }
        public string Name { get; set; }

        [Column(TypeName = "decimal(8, 2)")]
        public decimal Price { get; set; }

        public long CategoryId { get; set; }
        public Category Category { get; set; }

        public long SupplierId { get; set; }
        public Supplier Supplier { get; set; }
    } 

----------------------------------------------------------------------------------------

4. Configuring Data type

[Column(TypeName = "decimal(8, 2)")]
public decimal Price { get; set; }

--> We can change default datatype given by entity framework core and use our own.

----------------------------------------------------------------------------------------

5. Navigation Properties

        public long SupplierId { get; set; }
        public Supplier Supplier { get; set; }

--> These are navigation properties that will be used to query for related data so that it will be possible to query for all the products in a specific category

----------------------------------------------------------------------------------------

6. Data Context class

--> To create the Entity Framework Core context class that will provide access to the database, add a file called DataContext.cs to the Models folder 

    public class DataContext: DbContext {

        public DataContext(DbContextOptions<DataContext> opts): base(opts) { }

        public DbSet<Product> Products { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
    }

----------------------------------------------------------------------------------------

7. Auto Seed the Data

namespace WebApp.Models {

    public static class SeedData {

        public static void SeedDatabase(DataContext context) {

            context.Database.Migrate();

            if (context.Products.Count() == 0 && context.Suppliers.Count() == 0 && context.Categories.Count() == 0) {

                Supplier s1 = new Supplier { Name = "Splash Dudes", City = "San Jose"};
                Supplier s2 = new Supplier { Name = "Soccer Town", City = "Chicago"};
                Supplier s3 = new Supplier { Name = "Chess Co", City = "New York"};

                Category c1 = new Category { Name = "Watersports" };
                Category c2 = new Category { Name = "Soccer" };
                Category c3 = new Category { Name = "Chess" };

                context.Products.AddRange(
                    new Product {  Name = "Kayak", Price = 275, Category = c1, Supplier = s1},
                    new Product {  Name = "Lifejacket", Price = 48.95m, Category = c1, Supplier = s1},
                    new Product {  Name = "Soccer Ball", Price = 19.50m, Category = c2, Supplier = s2},
                    new Product {  Name = "Corner Flags", Price = 34.95m, Category = c2, Supplier = s2},
                    new Product {  Name = "Stadium", Price = 79500, Category = c2, Supplier = s2},
                    new Product {  Name = "Thinking Cap", Price = 16, Category = c3, Supplier = s3},
                    new Product {  Name = "Unsteady Chair", Price = 29.95m, Category = c3, Supplier = s3},
                    new Product {  Name = "Human Chess Board", Price = 75, Category = c3, Supplier = s3},
                    new Product {  Name = "Bling-Bling King", Price = 1200, Category = c3, Supplier = s3}
                );

                context.SaveChanges();
            }
        }
    } 
}

----------------------------------------------------------------------------------------

        public void Configure(IApplicationBuilder app, DataContext context) {
            ...

            SeedData.SeedDatabase(context);
        }

----------------------------------------------------------------------------------------

or

public static class SeedData
{
    public static void EnsurePopulated(IApplicationBuilder app)
    {
        StoreDbContext context = app.ApplicationServices.CreateScope().ServiceProvider.GetRequiredService<StoreDbContext>();

        if (context.Database.GetPendingMigrations().Any())
        {
            context.Database.Migrate();
        }

        if (!context.Products.Any())
        {
            context.Products.AddRange(
                new Product
                {
                    Name = "Kayak",
                    Description = "A boat for one person",
                    Category = "Watersports",
                    Price = 275
                },
                new Product
                {
                    Name = "Lifejacket",
                    Description = "Protective and fashionable",
                    Category = "Watersports",
                    Price = 48.95m
                },
                ...
            );
            context.SaveChanges();
        }
    }
}

----------------------------------------------------------------------------------------

or

namespace Platform.Models {

    public class SeedData {

        private CalculationContext context;
        private ILogger<SeedData> logger;

        private static Dictionary<int, long> data
            = new Dictionary<int, long>() {
                {1, 1}, {2, 3}, {3, 6}, {4, 10}, {5, 15},
                {6, 21}, {7, 28}, {8, 36}, {9, 45}, {10, 55}
            };

        public SeedData(CalculationContext dataContext, ILogger<SeedData> log) {
            context = dataContext;
            logger = log;
        }

        public void SeedDatabase() {
            context.Database.Migrate();

            if (context.Calculations.Count() == 0) {
                logger.LogInformation("Preparing to seed database");

                context.Calculations!.AddRange(data.Select(kvp => new Calculaton() {
                    Count = kvp.Key, Result = kvp.Value
                }));

                context.SaveChanges();
                logger.LogInformation("Database seeded");
            } else {
                logger.LogInformation("Database not seeded");
            }
        }
    } 
}

--> Calculation.cs

public int Count { get; set; }
public long Result { get; set;}


----------------------------------------------------------------------------------------

8. Configuring EntityFramework Services

            services.AddDbContext<DataContext>(opts => {
                opts.UseSqlServer(Configuration["ConnectionStrings:ProductConnection"]);
                opts.EnableSensitiveDataLogging(true);
            });

----------------------------------------------------------------------------------------

9. Connection String

  "ConnectionStrings": {
    "ProductConnection": "Server=(localdb)\\MSSQLLocalDB;Database=Products;MultipleActiveResultSets=True"
  } 

----------------------------------------------------------------------------------------

10. Creating and Applying the Migration

dotnet ef migrations add Initial
dotnet ef database update


----------------------------------------------------------------------------------------

11. Libman

libman install twitter-bootstrap@4.3.1 -d wwwroot/lib/twitter-bootstrap

----------------------------------------------------------------------------------------

12. Basic Configuration is done for any application

----------------------------------------------------------------------------------------































