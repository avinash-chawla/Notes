1. Blazor hosting models

--> Blazor WebAssembly
--> All compiled application code, its dependencies and .net runtime are send to browser webassembly
 
--> Blazor Server
--> Talks with Server with SignalR connection, just like angular 
--> Only diff is sent to browser
 
----------------------------------------------------------------------------------------

2. App.razor

--> It is parent component of all components
--> It is also called Router component that intercepts the browser navigation and renders the page that matches the requested address.

----------------------------------------------------------------------------------------

3. _Host.cshtml

--> Initial page for any blazor application
--> It contains blazor js file and it is linked to app.razor

----------------------------------------------------------------------------------------

4. MainLayout.razor

--> Shared Layout for all components
--> It is included in app.razor component

----------------------------------------------------------------------------------------

5. page directive

--> @page "/counter"
--> @page "/employeedetails/{Id}"

----------------------------------------------------------------------------------------

6. One-way binding

--> @currentCount

--> In class,

protected int currentCount = 0;

----------------------------------------------------------------------------------------

7. Event Handling

--> <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

--> In class, event handler,

    protected void IncrementCount()
    {
        currentCount++;
    }

--> @onclick is a delegate which needs value as method.

----------------------------------------------------------------------------------------

8. Nesting Razor Components

--> <Counter />

----------------------------------------------------------------------------------------

9. Base Class - ComponentClass

--> @inherits CounterBase

----------------------------------------------------------------------------------------

10. OnInitializedAsync()

--> Initialized with Component 

protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadEmployees);
    }

----------------------------------------------------------------------------------------

11. Spinner

@if (Employees == null)
{
    <div class="spinner"></div>
}
else
{..

--> Sometimes, view pages return NullReferenceException due to loading of data in OnInitialisedAsync method takes some time.

----------------------------------------------------------------------------------------

.spinner {
    border: 16px solid silver;
    border-top: 16px solid #337AB7;
    border-radius: 50%;
    width: 80px;
    height: 80px;
    animation: spin 700ms linear infinite;
    top: 40%;
    left: 55%;
    position: absolute;
}

@keyframes spin {
    0% {
        transform: rotate(0deg)
    }

    100% {
        transform: rotate(360deg)
    }
}

----------------------------------------------------------------------------------------

12. Service Class in Blazor Project

--> To call api endpoints asynchronously,

--> IEmployeeService.cs
--> EmployeeService.cs

----------------------------------------------------------------------------------------

13. EmployeeService.cs

namespace EmployeeManagement.Web.Services
{
    public class EmployeeService : IEmployeeService
    {
        private readonly HttpClient httpClient;

        public EmployeeService(HttpClient httpClient)
        {
            this.httpClient = httpClient;
        }

        public async Task<IEnumerable<Employee>> GetEmployees()
        {
            return await httpClient.GetJsonAsync<Employee[]>("api/employees");
        }
    }
}

----------------------------------------------------------------------------------------

14. HttpClient Services

public void ConfigureServices(IServiceCollection services)
{
    services.AddRazorPages();
    services.AddServerSideBlazor();

    services.AddHttpClient<IEmployeeService, EmployeeService>(client =>
    {
        client.BaseAddress = new Uri("https://localhost:44379/");
    });
}

----------------------------------------------------------------------------------------

15. Calling Service in Razor Component

namespace EmployeeManagement.Web.Pages
{
    public class EmployeeListBase : ComponentBase
    {
        [Inject]
        public IEmployeeService EmployeeService { get; set; }

        public IEnumerable<Employee> Employees { get; set; }

        protected override async Task OnInitializedAsync()
        {
            Employees = (await EmployeeService.GetEmployees()).ToList();
        }
    }
} 

----------------------------------------------------------------------------------------

16. Dealing with optional parameter details page

--> @page "/employeedetails/{Id}"

----------------------------------------------------------------------------------------

public class EmployeeDetailsBase : ComponentBase
{
        [Parameter]
        public string Id { get; set; }

        protected async override Task OnInitializedAsync()
        {
            Employee = await EmployeeService.GetEmployee(int.Parse(Id));
        }
}

----------------------------------------------------------------------------------------

--> Navigation Link on EmployeeList page to EmployeeDetails page

<a href="@($"employeedetails/{employee.EmployeeId}")" class="btn btn-primary m-1">View</a>

----------------------------------------------------------------------------------------

--> Service class

    public async Task<Employee> GetEmployee(int id)
    {
        return await httpClient.GetJsonAsync<Employee>($"api/employees/{id}");
    }

----------------------------------------------------------------------------------------

17. 

----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------













































































